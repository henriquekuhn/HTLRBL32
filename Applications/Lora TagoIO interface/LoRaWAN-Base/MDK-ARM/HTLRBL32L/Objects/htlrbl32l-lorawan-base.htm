<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\htlrbl32l-lorawan-base.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\htlrbl32l-lorawan-base.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Nov 22 14:16:13 2021
<BR><P>
<H3>Maximum Stack Usage =        808 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RESET_HANDLER &rArr; main &rArr; LORAWAN_tick &rArr; LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5f]">RadioSetPublicNetwork</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">RadioSetModem</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC_IRQHandler</a> from system_bluenrg_lp.o(i.ADC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[22]">BLE_AES_IRQHandler</a> from system_bluenrg_lp.o(i.BLE_AES_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[23]">BLE_ERROR_IRQHandler</a> from system_bluenrg_lp.o(i.BLE_ERROR_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[28]">BLE_RXTX_SEQ_IRQHandler</a> from system_bluenrg_lp.o(i.BLE_RXTX_SEQ_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[21]">BLE_TX_RX_IRQHandler</a> from system_bluenrg_lp.o(i.BLE_TX_RX_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[27]">BLE_WKUP_IRQHandler</a> from system_bluenrg_lp.o(i.BLE_WKUP_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[26]">CPU_WKUP_IRQHandler</a> from system_bluenrg_lp.o(i.CPU_WKUP_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[20]">DMA_IRQHandler</a> from system_bluenrg_lp.o(i.DMA_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[30]">DummyCB</a> from loramaccrypto.o(i.DummyCB) referenced from loramaccrypto.o(i.LoRaMacCryptoInit)
 <LI><a href="#[41]">DummyCB</a> from soft-se.o(i.DummyCB) referenced from soft-se.o(i.SecureElementInit)
 <LI><a href="#[3e]">EventClassBNvmCtxChanged</a> from loramac.o(i.EventClassBNvmCtxChanged) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[3d]">EventCommandsNvmCtxChanged</a> from loramac.o(i.EventCommandsNvmCtxChanged) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[31]">EventConfirmQueueNvmCtxChanged</a> from loramac.o(i.EventConfirmQueueNvmCtxChanged) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[3c]">EventCryptoNvmCtxChanged</a> from loramac.o(i.EventCryptoNvmCtxChanged) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[3b]">EventSecureElementNvmCtxChanged</a> from loramac.o(i.EventSecureElementNvmCtxChanged) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from system_bluenrg_lp.o(i.FLASH_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[1e]">GPIOA_IRQHandler</a> from system_bluenrg_lp.o(i.GPIOA_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[1f]">GPIOB_IRQHandler</a> from bluenrg_lp_it.o(i.GPIOB_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[0]">HW_GetBatteryLevel</a> from utils.o(i.HW_GetBatteryLevel) referenced 2 times from lorawan_setup.o(.data)
 <LI><a href="#[3]">HW_GetRandomSeed</a> from utils.o(i.HW_GetRandomSeed) referenced 2 times from lorawan_setup.o(.data)
 <LI><a href="#[1]">HW_GetTemperatureLevel</a> from utils.o(i.HW_GetTemperatureLevel) referenced 2 times from lorawan_setup.o(.data)
 <LI><a href="#[2]">HW_GetUniqueId</a> from utils.o(i.HW_GetUniqueId) referenced 2 times from lorawan_setup.o(.data)
 <LI><a href="#[b]">HardFault_IRQHandler</a> from system_bluenrg_lp.o(i.HardFault_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[12]">I2C1_IRQHandler</a> from system_bluenrg_lp.o(i.I2C1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[13]">I2C2_IRQHandler</a> from system_bluenrg_lp.o(i.I2C2_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[6]">LORA_ConfirmClass</a> from lorawan_setup.o(i.LORA_ConfirmClass) referenced 2 times from lorawan_setup.o(.data)
 <LI><a href="#[5]">LORA_HasJoined</a> from lorawan_setup.o(i.LORA_HasJoined) referenced 2 times from lorawan_setup.o(.data)
 <LI><a href="#[4]">LORA_RxData</a> from lorawan_setup.o(i.LORA_RxData) referenced 2 times from lorawan_setup.o(.data)
 <LI><a href="#[7]">LORA_TxNeeded</a> from lorawan_setup.o(i.LORA_TxNeeded) referenced 2 times from lorawan_setup.o(.data)
 <LI><a href="#[18]">LPUART1_IRQHandler</a> from system_bluenrg_lp.o(i.LPUART1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[8]">LoraMacProcessNotify</a> from lorawan_setup.o(i.LoraMacProcessNotify) referenced 2 times from lorawan_setup.o(.data)
 <LI><a href="#[25]">MR_BLE_IRQHandler</a> from system_bluenrg_lp.o(i.MR_BLE_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[2c]">McpsConfirm</a> from lora.o(i.McpsConfirm) referenced from lora.o(i.LORA_Init)
 <LI><a href="#[2d]">McpsIndication</a> from lora.o(i.McpsIndication) referenced from lora.o(i.LORA_Init)
 <LI><a href="#[2e]">MlmeConfirm</a> from lora.o(i.MlmeConfirm) referenced from lora.o(i.LORA_Init)
 <LI><a href="#[2f]">MlmeIndication</a> from lora.o(i.MlmeIndication) referenced from lora.o(i.LORA_Init)
 <LI><a href="#[a]">NMI_IRQHandler</a> from system_bluenrg_lp.o(i.NMI_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[35]">OnAckTimeoutTimerEvent</a> from loramac.o(i.OnAckTimeoutTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[44]">OnCertifTxNextPacketTimerEvent</a> from lora-test.o(i.OnCertifTxNextPacketTimerEvent) referenced from lora-test.o(i.certif_rx)
 <LI><a href="#[37]">OnRadioRxDone</a> from loramac.o(i.OnRadioRxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[38]">OnRadioRxError</a> from loramac.o(i.OnRadioRxError) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[3a]">OnRadioRxTimeout</a> from loramac.o(i.OnRadioRxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[36]">OnRadioTxDone</a> from loramac.o(i.OnRadioTxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[39]">OnRadioTxTimeout</a> from loramac.o(i.OnRadioTxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[33]">OnRxWindow1TimerEvent</a> from loramac.o(i.OnRxWindow1TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[34]">OnRxWindow2TimerEvent</a> from loramac.o(i.OnRxWindow2TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[45]">OnSensorsTimerEvent</a> from ht_sensors.o(i.OnSensorsTimerEvent) referenced from ht_sensors.o(i.initTimer)
 <LI><a href="#[32]">OnTxDelayedTimerEvent</a> from loramac.o(i.OnTxDelayedTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[46]">OnTxTimerEvent</a> from lorawan_setup.o(i.OnTxTimerEvent) referenced from lorawan_setup.o(i.set_certif_running)
 <LI><a href="#[1c]">PKA_IRQHandler</a> from system_bluenrg_lp.o(i.PKA_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[11]">PVD_IRQHandler</a> from system_bluenrg_lp.o(i.PVD_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[d]">PendSV_IRQHandler</a> from bluenrg_lp_it.o(i.PendSV_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[24]">RADIO_CTRL_IRQHandler</a> from system_bluenrg_lp.o(i.RADIO_CTRL_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[10]">RCC_IRQHandler</a> from system_bluenrg_lp.o(i.RCC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[9]">RESET_HANDLER</a> from system_bluenrg_lp.o(i.RESET_HANDLER) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from bluenrg_lp_it.o(i.RTC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[51]">RadioCheckRfFrequency</a> from radio.o(i.RadioCheckRfFrequency) referenced from radio.o(.constdata)
 <LI><a href="#[4a]">RadioGetStatus</a> from radio.o(i.RadioGetStatus) referenced from radio.o(.constdata)
 <LI><a href="#[60]">RadioGetWakeupTime</a> from radio.o(i.RadioGetWakeupTime) referenced from radio.o(.constdata)
 <LI><a href="#[49]">RadioInit</a> from radio.o(i.RadioInit) referenced from radio.o(.constdata)
 <LI><a href="#[61]">RadioIrqProcess</a> from radio.o(i.RadioIrqProcess) referenced from radio.o(.constdata)
 <LI><a href="#[4d]">RadioIsChannelFree</a> from radio.o(i.RadioIsChannelFree) referenced from radio.o(.constdata)
 <LI><a href="#[2b]">RadioOnDioIrq</a> from radio.o(i.RadioOnDioIrq) referenced from bluenrg_lp_hal_msp.o(i.IRQHandler_Config)
 <LI><a href="#[2b]">RadioOnDioIrq</a> from radio.o(i.RadioOnDioIrq) referenced from radio.o(i.RadioInit)
 <LI><a href="#[40]">RadioOnRxTimeoutIrq</a> from radio.o(i.RadioOnRxTimeoutIrq) referenced from radio.o(i.RadioInit)
 <LI><a href="#[3f]">RadioOnTxTimeoutIrq</a> from radio.o(i.RadioOnTxTimeoutIrq) referenced from radio.o(i.RadioInit)
 <LI><a href="#[4e]">RadioRandom</a> from radio.o(i.RadioRandom) referenced from radio.o(.constdata)
 <LI><a href="#[5b]">RadioRead</a> from radio.o(i.RadioRead) referenced from radio.o(.constdata)
 <LI><a href="#[5d]">RadioReadBuffer</a> from radio.o(i.RadioReadBuffer) referenced from radio.o(.constdata)
 <LI><a href="#[59]">RadioRssi</a> from radio.o(i.RadioRssi) referenced from radio.o(.constdata)
 <LI><a href="#[56]">RadioRx</a> from radio.o(i.RadioRx) referenced from radio.o(.constdata)
 <LI><a href="#[62]">RadioRxBoosted</a> from radio.o(i.RadioRxBoosted) referenced from radio.o(.constdata)
 <LI><a href="#[53]">RadioSend</a> from radio.o(i.RadioSend) referenced from radio.o(.constdata)
 <LI><a href="#[4c]">RadioSetChannel</a> from radio.o(i.RadioSetChannel) referenced from radio.o(.constdata)
 <LI><a href="#[5e]">RadioSetMaxPayloadLength</a> from radio.o(i.RadioSetMaxPayloadLength) referenced from radio.o(.constdata)
 <LI><a href="#[4b]">RadioSetModem</a> from radio.o(i.RadioSetModem) referenced from radio.o(.constdata)
 <LI><a href="#[5f]">RadioSetPublicNetwork</a> from radio.o(i.RadioSetPublicNetwork) referenced from radio.o(.constdata)
 <LI><a href="#[4f]">RadioSetRxConfig</a> from radio.o(i.RadioSetRxConfig) referenced from radio.o(.constdata)
 <LI><a href="#[63]">RadioSetRxDutyCycle</a> from radio.o(i.RadioSetRxDutyCycle) referenced from radio.o(.constdata)
 <LI><a href="#[50]">RadioSetTxConfig</a> from radio.o(i.RadioSetTxConfig) referenced from radio.o(.constdata)
 <LI><a href="#[58]">RadioSetTxContinuousWave</a> from radio.o(i.RadioSetTxContinuousWave) referenced from radio.o(.constdata)
 <LI><a href="#[54]">RadioSleep</a> from radio.o(i.RadioSleep) referenced from radio.o(.constdata)
 <LI><a href="#[55]">RadioStandby</a> from radio.o(i.RadioStandby) referenced from radio.o(.constdata)
 <LI><a href="#[57]">RadioStartCad</a> from radio.o(i.RadioStartCad) referenced from radio.o(.constdata)
 <LI><a href="#[52]">RadioTimeOnAir</a> from radio.o(i.RadioTimeOnAir) referenced from radio.o(.constdata)
 <LI><a href="#[5a]">RadioWrite</a> from radio.o(i.RadioWrite) referenced from radio.o(.constdata)
 <LI><a href="#[5c]">RadioWriteBuffer</a> from radio.o(i.RadioWriteBuffer) referenced from radio.o(.constdata)
 <LI><a href="#[14]">SPI1_IRQHandler</a> from bluenrg_lp_it.o(i.SPI1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[15]">SPI2_IRQHandler</a> from system_bluenrg_lp.o(i.SPI2_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[16]">SPI3_IRQHandler</a> from system_bluenrg_lp.o(i.SPI3_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[2a]">SPI_DMAAbortOnError</a> from rf_driver_hal_spi.o(i.SPI_DMAAbortOnError) referenced from rf_driver_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[c]">SVC_IRQHandler</a> from bluenrg_lp_it.o(i.SVC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[48]">SX126xIoDeInit</a> from sx1262_interface.o(i.SX126xIoDeInit) referenced from radio.o(.constdata)
 <LI><a href="#[47]">SX126xIoInit</a> from sx1262_interface.o(i.SX126xIoInit) referenced from radio.o(.constdata)
 <LI><a href="#[e]">SysTick_IRQHandler</a> from bluenrg_lp_it.o(i.SysTick_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[19]">TIM1_IRQHandler</a> from system_bluenrg_lp.o(i.TIM1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[1d]">UPCONV_IRQHandler</a> from system_bluenrg_lp.o(i.UPCONV_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[17]">USART1_IRQHandler</a> from system_bluenrg_lp.o(i.USART1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[43]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[42]">fputc</a> from uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[29]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[64]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[357]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[65]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[358]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[359]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[35a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[67]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[35b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[35c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[35d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNextV10X
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[35e]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915AlternateDr
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[35f]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
</UL>

<P><STRONG><a name="[361]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[362]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
</UL>

<P><STRONG><a name="[364]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHumidity
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[354]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txLora
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPressure
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHumidity
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemperatureHTS221
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemperatureHTS221
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPressure
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemperatureHTS221
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPressure
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHumidity
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHumidity
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemperatureHTS221
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemperatureHTS221
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[355]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txLora
</UL>

<P><STRONG><a name="[356]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txLora
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemperatureHTS221
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPressure
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHumidity
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[20e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemperatureHTS221
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPressure
</UL>

<P><STRONG><a name="[365]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[366]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[367]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[368]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[73]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[7b]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7a]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[340]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[36a]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rint
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[66]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[36b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[36c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[8c]"></a>AES_CMAC_Final</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, cmac.o(i.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[90]"></a>AES_CMAC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AES_CMAC_Init &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[91]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmac.o(i.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[93]"></a>AES_CMAC_Update</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, cmac.o(i.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[22]"></a>BLE_AES_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.BLE_AES_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[23]"></a>BLE_ERROR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.BLE_ERROR_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[28]"></a>BLE_RXTX_SEQ_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.BLE_RXTX_SEQ_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[21]"></a>BLE_TX_RX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.BLE_TX_RX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[27]"></a>BLE_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.BLE_WKUP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[26]"></a>CPU_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.CPU_WKUP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[33b]"></a>CS_contextRestore</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.CS_contextRestore))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[20]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.DMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[1e1]"></a>DetermineFrameType</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, loramac.o(i.DetermineFrameType))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[b4]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Error_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[1e]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.GPIOA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[1f]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.GPIOB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOB_IRQHandler &rArr; HAL_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_GetPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[bb]"></a>GetCtxs</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, loramac.o(i.GetCtxs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetCtxs &rArr; RegionGetNvmCtx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetNvmCtx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetNvmCtx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetNvmCtx
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetNvmCtx
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBGetNvmCtx
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[a1]"></a>GetKeyByID</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, soft-se.o(i.GetKeyByID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetKeyByID
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[f0]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rf_driver_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_Delay</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rf_driver_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_certif_running
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[ca]"></a>HAL_EXTI_ClearPending</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf_driver_hal_exti.o(i.HAL_EXTI_ClearPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_EXTI_ClearPending
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHandler_Config
</UL>

<P><STRONG><a name="[130]"></a>HAL_EXTI_Cmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rf_driver_hal_exti.o(i.HAL_EXTI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_EXTI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHandler_Config
</UL>

<P><STRONG><a name="[b9]"></a>HAL_EXTI_GetPending</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rf_driver_hal_exti.o(i.HAL_EXTI_GetPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_EXTI_GetPending
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsInterruptPending
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>HAL_EXTI_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rf_driver_hal_exti.o(i.HAL_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsInterruptPending
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>HAL_EXTI_RegisterCallback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rf_driver_hal_exti.o(i.HAL_EXTI_RegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_EXTI_RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHandler_Config
</UL>

<P><STRONG><a name="[cd]"></a>HAL_EXTI_SetConfigLine</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rf_driver_hal_exti.o(i.HAL_EXTI_SetConfigLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_EXTI_SetConfigLine
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_SetTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHandler_Config
</UL>

<P><STRONG><a name="[da]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, rf_driver_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[db]"></a>HAL_GPIO_Init</STRONG> (Thumb, 698 bytes, Stack size 24 bytes, rf_driver_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHandler_Config
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rf_driver_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Read
</UL>

<P><STRONG><a name="[10b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_driver_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>

<P><STRONG><a name="[c9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_driver_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, rf_driver_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, rf_driver_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[cf]"></a>HAL_I2C_Init</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, rf_driver_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, rf_driver_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemperatureHTS221
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPressure
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHumidity
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTemperatureHTS221
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateHumidity
</UL>

<P><STRONG><a name="[d6]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, rf_driver_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSP22HB_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSensorsTimerEvent
</UL>

<P><STRONG><a name="[d0]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSensorsTimerEvent
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[32a]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_driver_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rf_driver_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>HAL_InitTick</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rf_driver_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_MspInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bluenrg_lp_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rf_driver_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORAWAN_init
</UL>

<P><STRONG><a name="[133]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rf_driver_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORAWAN_init
</UL>

<P><STRONG><a name="[131]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rf_driver_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORAWAN_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHandler_Config
</UL>

<P><STRONG><a name="[e1]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rf_driver_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHandler_Config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[df]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_driver_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[10d]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_driver_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_BKUPRead
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rf_driver_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_BKUPWrite
</UL>

<P><STRONG><a name="[e3]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, rf_driver_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarmConfig
</UL>

<P><STRONG><a name="[e4]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, rf_driver_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[e6]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, rf_driver_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[e7]"></a>HAL_RTC_Init</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, rf_driver_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[eb]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, rf_driver_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, rf_driver_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, rf_driver_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rf_driver_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_driver_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
</UL>

<P><STRONG><a name="[ef]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, rf_driver_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_SPI_Init</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, rf_driver_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bluenrg_lp_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_EnableClock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 1050 bytes, Stack size 72 bytes, rf_driver_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
</UL>

<P><STRONG><a name="[f9]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_driver_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rf_driver_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f8]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rf_driver_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, rf_driver_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rf_driver_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rf_driver_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_UART_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, rf_driver_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[fe]"></a>HAL_UART_MspInit</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bluenrg_lp_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_EnableClock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[102]"></a>HAL_UART_Transmit</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, rf_driver_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[104]"></a>HTS221_Init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ht_sensors.o(i.HTS221_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Init &rArr; calibrateTemperatureHTS221 &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTemperatureHTS221
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors
</UL>

<P><STRONG><a name="[106]"></a>HW_GPIO_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hal_wrappers.o(i.HW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
</UL>

<P><STRONG><a name="[108]"></a>HW_GPIO_Read</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_wrappers.o(i.HW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_GPIO_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
</UL>

<P><STRONG><a name="[10a]"></a>HW_GPIO_Write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_wrappers.o(i.HW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xAntSwOn
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xAntSwOff
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
</UL>

<P><STRONG><a name="[0]"></a>HW_GetBatteryLevel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utils.o(i.HW_GetBatteryLevel))
<BR>[Address Reference Count : 1]<UL><LI> lorawan_setup.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>HW_GetRandomSeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utils.o(i.HW_GetRandomSeed))
<BR>[Address Reference Count : 1]<UL><LI> lorawan_setup.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>HW_GetTemperatureLevel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utils.o(i.HW_GetTemperatureLevel))
<BR>[Address Reference Count : 1]<UL><LI> lorawan_setup.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>HW_GetUniqueId</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, utils.o(i.HW_GetUniqueId))
<BR>[Address Reference Count : 1]<UL><LI> lorawan_setup.o(.data)
</UL>
<P><STRONG><a name="[10c]"></a>HW_RTC_BKUPRead</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc.o(i.HW_RTC_BKUPRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_RTC_BKUPRead
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>

<P><STRONG><a name="[10e]"></a>HW_RTC_BKUPWrite</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc.o(i.HW_RTC_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_RTC_BKUPWrite &rArr; HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
</UL>

<P><STRONG><a name="[110]"></a>HW_RTC_GetCalendarTime</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, rtc.o(i.HW_RTC_GetCalendarTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HW_RTC_GetCalendarTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>

<P><STRONG><a name="[333]"></a>HW_RTC_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc.o(i.HW_RTC_GetMinimumTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[332]"></a>HW_RTC_GetTimerContext</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.HW_RTC_GetTimerContext))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[113]"></a>HW_RTC_GetTimerElapsedTime</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, rtc.o(i.HW_RTC_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HW_RTC_GetTimerElapsedTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[114]"></a>HW_RTC_GetTimerValue</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, rtc.o(i.HW_RTC_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[115]"></a>HW_RTC_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc.o(i.HW_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HW_RTC_Init &rArr; HW_RTC_SetTimerContext &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarmConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[118]"></a>HW_RTC_SetAlarm</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc.o(i.HW_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[117]"></a>HW_RTC_SetTimerContext</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtc.o(i.HW_RTC_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HW_RTC_SetTimerContext &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[11b]"></a>HW_RTC_StopAlarm</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc.o(i.HW_RTC_StopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_RTC_StopAlarm &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[112]"></a>HW_RTC_Tick2ms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtc.o(i.HW_RTC_Tick2ms))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[11c]"></a>HW_RTC_ms2Tick</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtc.o(i.HW_RTC_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[11e]"></a>HW_SPI_InOut</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_wrappers.o(i.HW_SPI_InOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
</UL>

<P><STRONG><a name="[b]"></a>HardFault_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.HardFault_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[12]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[13]"></a>I2C2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.I2C2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[12d]"></a>IRQHandler_Config</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, bluenrg_lp_hal_msp.o(i.IRQHandler_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IRQHandler_Config &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB_EnableClock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_SetConfigLine
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_RegisterCallback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_Cmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_ClearPending
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>LORAWAN_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lorawan_setup.o(i.LORAWAN_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = LORAWAN_init &rArr; LORA_Join &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xClearIrqStatus
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRegion
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>LORAWAN_tick</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lorawan_setup.o(i.LORAWAN_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = LORAWAN_tick &rArr; LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>LORA_Init</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, lora.o(i.LORA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LORA_Init &rArr; LoRaMacMibSetRequestConfirm &rArr; SwitchClass &rArr; RegionComputeRxWindowParameters &rArr; RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRegion
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStart
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORAWAN_init
</UL>

<P><STRONG><a name="[138]"></a>LORA_Join</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lora.o(i.LORA_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = LORA_Join &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_send
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORAWAN_init
</UL>

<P><STRONG><a name="[144]"></a>LORA_JoinStatus</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, lora.o(i.LORA_JoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = LORA_JoinStatus &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_send
</UL>

<P><STRONG><a name="[13d]"></a>LORA_RequestClass</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, lora.o(i.LORA_RequestClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = LORA_RequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; SwitchClass &rArr; RegionComputeRxWindowParameters &rArr; RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
</UL>

<P><STRONG><a name="[13c]"></a>LORA_send</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lora.o(i.LORA_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_certif_running
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_send
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_TxNeeded
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_ConfirmClass
</UL>

<P><STRONG><a name="[18]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LPUART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[14c]"></a>LSP22HB_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ht_sensors.o(i.LSP22HB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSP22HB_Init &rArr; calibrateHumidity &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateHumidity
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors
</UL>

<P><STRONG><a name="[152]"></a>LoRaMacAdrCalcNext</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, loramacadr.o(i.LoRaMacAdrCalcNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = LoRaMacAdrCalcNext &rArr; CalcNextV10X &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNextV10X
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[1de]"></a>LoRaMacClassBBeaconFreqReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBBeaconFreqReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[122]"></a>LoRaMacClassBBeaconTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBBeaconTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1dd]"></a>LoRaMacClassBBeaconTimingAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBBeaconTimingAns))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1da]"></a>LoRaMacClassBDeviceTimeAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBDeviceTimeAns))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[c0]"></a>LoRaMacClassBGetNvmCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[327]"></a>LoRaMacClassBHaltBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBHaltBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[198]"></a>LoRaMacClassBInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBInit))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1aa]"></a>LoRaMacClassBIsAcquisitionInProgress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsAcquisitionInProgress))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[120]"></a>LoRaMacClassBIsBeaconExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsBeaconExpected))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[325]"></a>LoRaMacClassBIsBeaconModeActive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsBeaconModeActive))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[126]"></a>LoRaMacClassBIsMulticastExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsMulticastExpected))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[123]"></a>LoRaMacClassBIsPingExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsPingExpected))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[326]"></a>LoRaMacClassBIsUplinkCollision</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsUplinkCollision))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[19c]"></a>LoRaMacClassBMibGetRequestConfirm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBMibGetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[128]"></a>LoRaMacClassBMulticastSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBMulticastSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[1dc]"></a>LoRaMacClassBPingSlotChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBPingSlotChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1db]"></a>LoRaMacClassBPingSlotInfoAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBPingSlotInfoAns))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[125]"></a>LoRaMacClassBPingSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBPingSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[1ab]"></a>LoRaMacClassBProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBProcess))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[308]"></a>LoRaMacClassBRestoreNvmCtx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBRestoreNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
</UL>

<P><STRONG><a name="[18d]"></a>LoRaMacClassBResumeBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBResumeBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
</UL>

<P><STRONG><a name="[1df]"></a>LoRaMacClassBRxBeacon</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBRxBeacon))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[121]"></a>LoRaMacClassBSetBeaconState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetBeaconState))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[127]"></a>LoRaMacClassBSetMulticastSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetMulticastSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[1a9]"></a>LoRaMacClassBSetPingSlotInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetPingSlotInfo))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[124]"></a>LoRaMacClassBSetPingSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetPingSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[324]"></a>LoRaMacClassBStopRxSlots</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBStopRxSlots))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[329]"></a>LoRaMacClassBSwitchClass</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSwitchClass))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
</UL>

<P><STRONG><a name="[154]"></a>LoRaMacCommandsAddCmd</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, loramaccommands.o(i.LoRaMacCommandsAddCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoRaMacCommandsAddCmd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxCallback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocNewMacCommandSlot
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkedListAdd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSticky
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[bf]"></a>LoRaMacCommandsGetNvmCtx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loramaccommands.o(i.LoRaMacCommandsGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[1af]"></a>LoRaMacCommandsGetSizeSerializedCmds</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramaccommands.o(i.LoRaMacCommandsGetSizeSerializedCmds))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[159]"></a>LoRaMacCommandsInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loramaccommands.o(i.LoRaMacCommandsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCommandsInit &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkedListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[15b]"></a>LoRaMacCommandsRemoveCmd</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, loramaccommands.o(i.LoRaMacCommandsRemoveCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacCommandsRemoveCmd &rArr; LinkedListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkedListRemove
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMacCommandSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
</UL>

<P><STRONG><a name="[15c]"></a>LoRaMacCommandsRemoveNoneStickyCmds</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, loramaccommands.o(i.LoRaMacCommandsRemoveNoneStickyCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacCommandsRemoveNoneStickyCmds &rArr; LoRaMacCommandsRemoveCmd &rArr; LinkedListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[15d]"></a>LoRaMacCommandsRemoveStickyAnsCmds</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, loramaccommands.o(i.LoRaMacCommandsRemoveStickyAnsCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacCommandsRemoveStickyAnsCmds &rArr; LoRaMacCommandsRemoveCmd &rArr; LinkedListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveMacCommands
</UL>

<P><STRONG><a name="[15e]"></a>LoRaMacCommandsRestoreNvmCtx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, loramaccommands.o(i.LoRaMacCommandsRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCommandsRestoreNvmCtx &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
</UL>

<P><STRONG><a name="[15f]"></a>LoRaMacCommandsSerializeCmds</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, loramaccommands.o(i.LoRaMacCommandsSerializeCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacCommandsSerializeCmds &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[18f]"></a>LoRaMacCommandsStickyCmdsPending</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, loramaccommands.o(i.LoRaMacCommandsStickyCmdsPending))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleScheduleUplinkEvent
</UL>

<P><STRONG><a name="[160]"></a>LoRaMacConfirmQueueAdd</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
</UL>

<P><STRONG><a name="[18c]"></a>LoRaMacConfirmQueueGetCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueGetCnt))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[c1]"></a>LoRaMacConfirmQueueGetNvmCtx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[161]"></a>LoRaMacConfirmQueueGetStatus</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacConfirmQueueGetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMlmeRequest
</UL>

<P><STRONG><a name="[162]"></a>LoRaMacConfirmQueueHandleCb</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueHandleCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacConfirmQueueHandleCb &rArr; LoRaMacConfirmQueueRemoveFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRemoveFirst
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
</UL>

<P><STRONG><a name="[164]"></a>LoRaMacConfirmQueueInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacConfirmQueueInit &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[9c]"></a>LoRaMacConfirmQueueIsCmdActive</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueIsCmdActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacConfirmQueueIsCmdActive &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMlmeRequest
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCheckForBeaconAcquisition
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1a4]"></a>LoRaMacConfirmQueueIsFull</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueIsFull))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[163]"></a>LoRaMacConfirmQueueRemoveFirst</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueRemoveFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueRemoveFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
</UL>

<P><STRONG><a name="[165]"></a>LoRaMacConfirmQueueRestoreNvmCtx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacConfirmQueueRestoreNvmCtx &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
</UL>

<P><STRONG><a name="[166]"></a>LoRaMacConfirmQueueSetStatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueSetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacConfirmQueueSetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[129]"></a>LoRaMacConfirmQueueSetStatusCmn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueSetStatusCmn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxTimeout
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[167]"></a>LoRaMacCryptoDeriveMcKEKey</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, loramaccrypto.o(i.LoRaMacCryptoDeriveMcKEKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = LoRaMacCryptoDeriveMcKEKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_set_key &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[168]"></a>LoRaMacCryptoDeriveMcRootKey</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, loramaccrypto.o(i.LoRaMacCryptoDeriveMcRootKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_set_key &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[c6]"></a>LoRaMacCryptoGetFCntDown</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, loramaccrypto.o(i.LoRaMacCryptoGetFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LoRaMacCryptoGetFCntDown &rArr; GetLastFcntDown &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastFcntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFCntDown
</UL>

<P><STRONG><a name="[1cf]"></a>LoRaMacCryptoGetFCntUp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, loramaccrypto.o(i.LoRaMacCryptoGetFCntUp))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
</UL>

<P><STRONG><a name="[bc]"></a>LoRaMacCryptoGetNvmCtx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loramaccrypto.o(i.LoRaMacCryptoGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[169]"></a>LoRaMacCryptoHandleJoinAccept</STRONG> (Thumb, 514 bytes, Stack size 312 bytes, loramaccrypto.o(i.LoRaMacCryptoHandleJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = LoRaMacCryptoHandleJoinAccept &rArr; DeriveSessionKey10x &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_set_key &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[16e]"></a>LoRaMacCryptoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, loramaccrypto.o(i.LoRaMacCryptoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCryptoInit &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFCnts
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[170]"></a>LoRaMacCryptoPrepareJoinRequest</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacCryptoPrepareJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LoRaMacCryptoPrepareJoinRequest &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementRandomNumber
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
</UL>

<P><STRONG><a name="[173]"></a>LoRaMacCryptoRestoreNvmCtx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, loramaccrypto.o(i.LoRaMacCryptoRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCryptoRestoreNvmCtx &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
</UL>

<P><STRONG><a name="[174]"></a>LoRaMacCryptoSecureMessage</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, loramaccrypto.o(i.LoRaMacCryptoSecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LoRaMacCryptoSecureMessage &rArr; ComputeCmacB0 &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmacB0
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
</UL>

<P><STRONG><a name="[177]"></a>LoRaMacCryptoSetKey</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, loramaccrypto.o(i.LoRaMacCryptoSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_set_key &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1a2]"></a>LoRaMacCryptoSetLrWanVersion</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, loramaccrypto.o(i.LoRaMacCryptoSetLrWanVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacCryptoSetLrWanVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[196]"></a>LoRaMacCryptoSetMulticastReference</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, loramaccrypto.o(i.LoRaMacCryptoSetMulticastReference))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[179]"></a>LoRaMacCryptoUnsecureMessage</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, loramaccrypto.o(i.LoRaMacCryptoUnsecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFCntDown
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyAddrItem
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFCntDown
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[13f]"></a>LoRaMacInitialization</STRONG> (Thumb, 1258 bytes, Stack size 80 bytes, loramac.o(i.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = LoRaMacInitialization &rArr; ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacEnableRequests
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetMulticastReference
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
</UL>

<P><STRONG><a name="[199]"></a>LoRaMacIsBusy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacIsBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacIsBusy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[148]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventMacNvmCtxChanged
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_tx
</UL>

<P><STRONG><a name="[1a3]"></a>LoRaMacMibClassBSetRequestConfirm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacMibClassBSetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[145]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMibGetRequestConfirm
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RequestClass
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_JoinStatus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceUpLinkFrame
</UL>

<P><STRONG><a name="[140]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 1700 bytes, Stack size 40 bytes, loramac.o(i.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; SwitchClass &rArr; RegionComputeRxWindowParameters &rArr; RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRegionNvmCtxChanged
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventMacNvmCtxChanged
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibClassBSetRequestConfirm
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetLrWanVersion
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RequestClass
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
</UL>

<P><STRONG><a name="[143]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventMacNvmCtxChanged
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsFull
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsAcquisitionInProgress
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
</UL>

<P><STRONG><a name="[17a]"></a>LoRaMacParserData</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, loramacparser.o(i.LoRaMacParserData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacParserData &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[16b]"></a>LoRaMacParserJoinAccept</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, loramacparser.o(i.LoRaMacParserJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacParserJoinAccept &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[13b]"></a>LoRaMacProcess</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleScheduleUplinkEvent
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMlmeRequest
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIndicationEvents
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacEnableRequests
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCheckForRxAbort
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCheckForBeaconAcquisition
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRequestPending
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBProcess
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORAWAN_tick
</UL>

<P><STRONG><a name="[147]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = LoRaMacQueryTxPossible &rArr; LoRaMacAdrCalcNext &rArr; CalcNextV10X &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_tx
</UL>

<P><STRONG><a name="[176]"></a>LoRaMacSerializerData</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, loramacserializer.o(i.LoRaMacSerializerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacSerializerData &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[172]"></a>LoRaMacSerializerJoinRequest</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, loramacserializer.o(i.LoRaMacSerializerJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacSerializerJoinRequest &rArr; memcpyr
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[142]"></a>LoRaMacStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramac.o(i.LoRaMacStart))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
</UL>

<P><STRONG><a name="[141]"></a>LoRaMacTestSetDutyCycleOn</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacTestSetDutyCycleOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionKR920Verify &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
</UL>

<P><STRONG><a name="[25]"></a>MR_BLE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.MR_BLE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[1b0]"></a>MX_GPIO_Init</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, bluenrg_lp_hal_msp.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB_EnableClock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>MX_I2C2_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>MX_RTC_Init</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_RTC_Init &rArr; HW_RTC_Init &rArr; HW_RTC_SetTimerContext &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>MX_SPI1_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, uart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>MrBleBiasTrimConfig</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, system_bluenrg_lp.o(i.MrBleBiasTrimConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MrBleBiasTrimConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRFClockSource
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRC64MPLLPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a]"></a>NMI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.NMI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[1c]"></a>PKA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.PKA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[11]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg_lp_it.o(i.PendSV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[1ce]"></a>PrepareFrame</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, loramac.o(i.PrepareFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = PrepareFrame &rArr; GetMaxAppPayloadWithoutFOptsLength &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntUp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[24]"></a>RADIO_CTRL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.RADIO_CTRL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[9]"></a>RESET_HANDLER</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.RESET_HANDLER))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = RESET_HANDLER &rArr; main &rArr; LORAWAN_tick &rArr; LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[e5]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rf_driver_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[ec]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rf_driver_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[e9]"></a>RTC_EnterInitMode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rf_driver_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RTC_IRQHandler &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[51]"></a>RadioCheckRfFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(i.RadioCheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>RadioClockConfig</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, system_bluenrg_lp.o(i.RadioClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RadioClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSCFG_GetDeviceVersion
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRFClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4a]"></a>RadioGetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio.o(i.RadioGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioGetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>RadioGetWakeupTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(i.RadioGetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioGetWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetBoardTcxoWakeupTime
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>RadioInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, radio.o(i.RadioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RadioInit &rArr; SX126xSetTxParams &rArr; SX126xSetPaConfig &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRegulatorMode
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetBufferBaseAddress
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetWakeupTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>RadioIrqProcess</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, radio.o(i.RadioIrqProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RadioIrqProcess &rArr; SX126xGetPayload &rArr; SX126xGetRxBufferStatus &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xClearIrqStatus
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetOperatingMode
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPayload
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetOperatingMode
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetIrqStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioOnDioIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>RadioIsChannelFree</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, radio.o(i.RadioIsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = RadioIsChannelFree &rArr; RadioSetChannel &rArr; SX126xSetRfFrequency &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRssi
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>RadioOnDioIrq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, radio.o(i.RadioOnDioIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RadioOnDioIrq &rArr; RadioIrqProcess &rArr; SX126xGetPayload &rArr; SX126xGetRxBufferStatus &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bluenrg_lp_hal_msp.o(i.IRQHandler_Config)
<LI> radio.o(i.RadioInit)
</UL>
<P><STRONG><a name="[40]"></a>RadioOnRxTimeoutIrq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, radio.o(i.RadioOnRxTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RadioOnRxTimeoutIrq &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioInit)
</UL>
<P><STRONG><a name="[3f]"></a>RadioOnTxTimeoutIrq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio.o(i.RadioOnTxTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioOnTxTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioInit)
</UL>
<P><STRONG><a name="[4e]"></a>RadioRandom</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, radio.o(i.RadioRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RadioRandom &rArr; RadioSetModem &rArr; RadioSetPublicNetwork &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRx
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRssiInst
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>RadioRead</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, radio.o(i.RadioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RadioRead &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>RadioReadBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, radio.o(i.RadioReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RadioReadBuffer &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>RadioRssi</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(i.RadioRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RadioRssi &rArr; SX126xGetRssiInst &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRssiInst
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>RadioRx</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, radio.o(i.RadioRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RadioRx &rArr; SX126xSetDioIrqParams &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRx
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>RadioRxBoosted</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, radio.o(i.RadioRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RadioRxBoosted &rArr; SX126xSetRxBoosted &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxBoosted
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>RadioSend</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, radio.o(i.RadioSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RadioSend &rArr; SX126xSetPacketParams &rArr; SX126xSetCrcSeed &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSendPayload
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>RadioSetChannel</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, radio.o(i.RadioSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RadioSetChannel &rArr; SX126xSetRfFrequency &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>RadioSetMaxPayloadLength</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, radio.o(i.RadioSetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RadioSetMaxPayloadLength &rArr; SX126xSetPacketParams &rArr; SX126xSetCrcSeed &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>RadioSetModem</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, radio.o(i.RadioSetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RadioSetModem &rArr; RadioSetPublicNetwork &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>RadioSetPublicNetwork</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, radio.o(i.RadioSetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + In Cycle
<LI>Call Chain = RadioSetPublicNetwork &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>RadioSetRxConfig</STRONG> (Thumb, 570 bytes, Stack size 96 bytes, radio.o(i.RadioSetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = RadioSetRxConfig &rArr; SX126xSetModulationParams &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSyncWord
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStopRxTimerOnPreambleDetect
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetLoRaSymbNumTimeout
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetFskBandwidthRegValue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>RadioSetRxDutyCycle</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, radio.o(i.RadioSetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RadioSetRxDutyCycle &rArr; SX126xSetRxDutyCycle &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxDutyCycle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>RadioSetTxConfig</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, radio.o(i.RadioSetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = RadioSetTxConfig &rArr; SX126xSetModulationParams &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSyncWord
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfTxPower
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetFskBandwidthRegValue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>RadioSetTxContinuousWave</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, radio.o(i.RadioSetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = RadioSetTxContinuousWave &rArr; SX126xSetRfFrequency &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxContinuousWave
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfTxPower
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>RadioSleep</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio.o(i.RadioSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RadioSleep &rArr; SX126xSetSleep &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>RadioStandby</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(i.RadioStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RadioStandby &rArr; SX126xSetStandby &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>RadioStartCad</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(i.RadioStartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RadioStartCad &rArr; SX126xSetCad &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>RadioTimeOnAir</STRONG> (Thumb, 512 bytes, Stack size 112 bytes, radio.o(i.RadioTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RadioTimeOnAir &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rint
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>RadioWrite</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, radio.o(i.RadioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RadioWrite &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>RadioWriteBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, radio.o(i.RadioWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RadioWriteBuffer &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[241]"></a>RegionAS923AlternateDr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionas923.o(i.RegionAS923AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[210]"></a>RegionAS923ApplyCFList</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, regionas923.o(i.RegionAS923ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionAS923ApplyCFList &rArr; RegionAS923ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelsRemove
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[253]"></a>RegionAS923ApplyDrOffset</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, regionas923.o(i.RegionAS923ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionAS923ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[213]"></a>RegionAS923CalcBackOff</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, regionas923.o(i.RegionAS923CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionAS923CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[215]"></a>RegionAS923ChanMaskSet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regionas923.o(i.RegionAS923ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionAS923ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[211]"></a>RegionAS923ChannelAdd</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionAS923ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
</UL>

<P><STRONG><a name="[212]"></a>RegionAS923ChannelsRemove</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionAS923ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
</UL>

<P><STRONG><a name="[219]"></a>RegionAS923ComputeRxWindowParameters</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, regionas923.o(i.RegionAS923ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionAS923ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[21e]"></a>RegionAS923DlChannelReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionAS923DlChannelReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2bc]"></a>RegionAS923GetNvmCtx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regionas923.o(i.RegionAS923GetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
</UL>

<P><STRONG><a name="[21f]"></a>RegionAS923GetPhyParam</STRONG> (Thumb, 410 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionAS923GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[221]"></a>RegionAS923InitDefaults</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, regionas923.o(i.RegionAS923InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionAS923InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[222]"></a>RegionAS923LinkAdrReq</STRONG> (Thumb, 366 bytes, Stack size 96 bytes, regionas923.o(i.RegionAS923LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionAS923LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[225]"></a>RegionAS923NewChannelReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionAS923NewChannelReq &rArr; RegionAS923ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelsRemove
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[226]"></a>RegionAS923NextChannel</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, regionas923.o(i.RegionAS923NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[228]"></a>RegionAS923RxConfig</STRONG> (Thumb, 266 bytes, Stack size 80 bytes, regionas923.o(i.RegionAS923RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionAS923RxConfig &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[229]"></a>RegionAS923RxParamSetupReq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionAS923RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[22a]"></a>RegionAS923SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAS923SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[22c]"></a>RegionAS923SetContinuousWave</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RegionAS923SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[22f]"></a>RegionAS923TxConfig</STRONG> (Thumb, 264 bytes, Stack size 88 bytes, regionas923.o(i.RegionAS923TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = RegionAS923TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2fa]"></a>RegionAS923TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionas923.o(i.RegionAS923TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[230]"></a>RegionAS923Verify</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionAS923Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[242]"></a>RegionAU915AlternateDr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, regionau915.o(i.RegionAU915AlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionAU915AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[24a]"></a>RegionAU915ApplyCFList</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAU915ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[254]"></a>RegionAU915ApplyDrOffset</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, regionau915.o(i.RegionAU915ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionAU915ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[231]"></a>RegionAU915CalcBackOff</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, regionau915.o(i.RegionAU915CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionAU915CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[232]"></a>RegionAU915ChanMaskSet</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RegionAU915ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[233]"></a>RegionAU915ComputeRxWindowParameters</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, regionau915.o(i.RegionAU915ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionAU915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[294]"></a>RegionAU915DlChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915DlChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2bd]"></a>RegionAU915GetNvmCtx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915GetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
</UL>

<P><STRONG><a name="[235]"></a>RegionAU915GetPhyParam</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionAU915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[237]"></a>RegionAU915InitDefaults</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, regionau915.o(i.RegionAU915InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionAU915InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[238]"></a>RegionAU915LinkAdrReq</STRONG> (Thumb, 642 bytes, Stack size 104 bytes, regionau915.o(i.RegionAU915LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RegionAU915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2de]"></a>RegionAU915NewChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915NewChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[239]"></a>RegionAU915NextChannel</STRONG> (Thumb, 236 bytes, Stack size 136 bytes, regionau915.o(i.RegionAU915NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = RegionAU915NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2f1]"></a>RegionAU915RxConfig</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, regionau915.o(i.RegionAU915RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionAU915RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[23a]"></a>RegionAU915RxParamSetupReq</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionAU915RxParamSetupReq &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[23c]"></a>RegionAU915SetBandTxDone</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAU915SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[23d]"></a>RegionAU915SetContinuousWave</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, regionau915.o(i.RegionAU915SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RegionAU915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[23f]"></a>RegionAU915TxConfig</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, regionau915.o(i.RegionAU915TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RegionAU915TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2fb]"></a>RegionAU915TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[240]"></a>RegionAU915Verify</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionAU915Verify &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[1a5]"></a>RegionAlternateDr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, region.o(i.RegionAlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionAlternateDr &rArr; RegionUS915AlternateDr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915AlternateDr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864AlternateDr
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920AlternateDr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868AlternateDr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433AlternateDr
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779AlternateDr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470AlternateDr
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915AlternateDr
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923AlternateDr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1e0]"></a>RegionApplyCFList</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, region.o(i.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = RegionApplyCFList &rArr; RegionKR920ApplyCFList &rArr; RegionKR920ChannelAdd &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ApplyCFList
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ApplyCFList
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyCFList
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ApplyCFList
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ApplyCFList
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ApplyCFList
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ApplyCFList
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[252]"></a>RegionApplyDrOffset</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, region.o(i.RegionApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionApplyDrOffset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ApplyDrOffset
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ApplyDrOffset
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyDrOffset
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyDrOffset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ApplyDrOffset
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ApplyDrOffset
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ApplyDrOffset
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ApplyDrOffset
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyDrOffset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[243]"></a>RegionCN470AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[24b]"></a>RegionCN470ApplyCFList</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[255]"></a>RegionCN470ApplyDrOffset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, regioncn470.o(i.RegionCN470ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCN470ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[25c]"></a>RegionCN470CalcBackOff</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, regioncn470.o(i.RegionCN470CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionCN470CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[25d]"></a>RegionCN470ChanMaskSet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regioncn470.o(i.RegionCN470ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCN470ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[25e]"></a>RegionCN470ComputeRxWindowParameters</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, regioncn470.o(i.RegionCN470ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[295]"></a>RegionCN470DlChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470DlChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2be]"></a>RegionCN470GetNvmCtx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470GetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
</UL>

<P><STRONG><a name="[260]"></a>RegionCN470GetPhyParam</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionCN470GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[262]"></a>RegionCN470InitDefaults</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, regioncn470.o(i.RegionCN470InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCN470InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[263]"></a>RegionCN470LinkAdrReq</STRONG> (Thumb, 338 bytes, Stack size 104 bytes, regioncn470.o(i.RegionCN470LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RegionCN470LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2df]"></a>RegionCN470NewChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470NewChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[264]"></a>RegionCN470NextChannel</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, regioncn470.o(i.RegionCN470NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[265]"></a>RegionCN470RxConfig</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, regioncn470.o(i.RegionCN470RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = RegionCN470RxConfig &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[266]"></a>RegionCN470RxParamSetupReq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCN470RxParamSetupReq &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[268]"></a>RegionCN470SetBandTxDone</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[269]"></a>RegionCN470SetContinuousWave</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, regioncn470.o(i.RegionCN470SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RegionCN470SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[26b]"></a>RegionCN470TxConfig</STRONG> (Thumb, 188 bytes, Stack size 72 bytes, regioncn470.o(i.RegionCN470TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2fc]"></a>RegionCN470TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[26c]"></a>RegionCN470Verify</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCN470Verify &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[244]"></a>RegionCN779AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regioncn779.o(i.RegionCN779AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[24c]"></a>RegionCN779ApplyCFList</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, regioncn779.o(i.RegionCN779ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionCN779ApplyCFList &rArr; RegionCN779ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ChannelsRemove
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[256]"></a>RegionCN779ApplyDrOffset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, regioncn779.o(i.RegionCN779ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCN779ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[26f]"></a>RegionCN779CalcBackOff</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, regioncn779.o(i.RegionCN779CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionCN779CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[270]"></a>RegionCN779ChanMaskSet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regioncn779.o(i.RegionCN779ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCN779ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[26d]"></a>RegionCN779ChannelAdd</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, regioncn779.o(i.RegionCN779ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionCN779ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779NewChannelReq
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ApplyCFList
</UL>

<P><STRONG><a name="[26e]"></a>RegionCN779ChannelsRemove</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regioncn779.o(i.RegionCN779ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionCN779ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779NewChannelReq
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ApplyCFList
</UL>

<P><STRONG><a name="[272]"></a>RegionCN779ComputeRxWindowParameters</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, regioncn779.o(i.RegionCN779ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionCN779ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[274]"></a>RegionCN779DlChannelReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regioncn779.o(i.RegionCN779DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCN779DlChannelReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2bf]"></a>RegionCN779GetNvmCtx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regioncn779.o(i.RegionCN779GetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
</UL>

<P><STRONG><a name="[275]"></a>RegionCN779GetPhyParam</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, regioncn779.o(i.RegionCN779GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionCN779GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779LinkAdrReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[277]"></a>RegionCN779InitDefaults</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, regioncn779.o(i.RegionCN779InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RegionCN779InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[278]"></a>RegionCN779LinkAdrReq</STRONG> (Thumb, 368 bytes, Stack size 96 bytes, regioncn779.o(i.RegionCN779LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionCN779LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779GetPhyParam
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[279]"></a>RegionCN779NewChannelReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, regioncn779.o(i.RegionCN779NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionCN779NewChannelReq &rArr; RegionCN779ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ChannelsRemove
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[27a]"></a>RegionCN779NextChannel</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, regioncn779.o(i.RegionCN779NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = RegionCN779NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[27b]"></a>RegionCN779RxConfig</STRONG> (Thumb, 266 bytes, Stack size 80 bytes, regioncn779.o(i.RegionCN779RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionCN779RxConfig &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[27c]"></a>RegionCN779RxParamSetupReq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, regioncn779.o(i.RegionCN779RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCN779RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[27d]"></a>RegionCN779SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regioncn779.o(i.RegionCN779SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN779SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[27e]"></a>RegionCN779SetContinuousWave</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, regioncn779.o(i.RegionCN779SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RegionCN779SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[280]"></a>RegionCN779TxConfig</STRONG> (Thumb, 264 bytes, Stack size 88 bytes, regioncn779.o(i.RegionCN779TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = RegionCN779TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2fd]"></a>RegionCN779TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioncn779.o(i.RegionCN779TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[281]"></a>RegionCN779Verify</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, regioncn779.o(i.RegionCN779Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCN779Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[9d]"></a>RegionCalcBackOff</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, region.o(i.RegionCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionCalcBackOff &rArr; RegionUS915CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915CalcBackOff
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864CalcBackOff
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920CalcBackOff
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868CalcBackOff
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433CalcBackOff
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779CalcBackOff
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470CalcBackOff
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915CalcBackOff
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923CalcBackOff
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>

<P><STRONG><a name="[1a0]"></a>RegionChanMaskSet</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, region.o(i.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RegionChanMaskSet &rArr; RegionUS915ChanMaskSet &rArr; RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ChanMaskSet
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChanMaskSet
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChanMaskSet
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ChanMaskSet
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ChanMaskSet
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ChanMaskSet
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChanMaskSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[214]"></a>RegionCommonCalcBackOff</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetJoinDc
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915CalcBackOff
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864CalcBackOff
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920CalcBackOff
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868CalcBackOff
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433CalcBackOff
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779CalcBackOff
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470CalcBackOff
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915CalcBackOff
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923CalcBackOff
</UL>

<P><STRONG><a name="[218]"></a>RegionCommonChanDisable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonChanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ChannelsRemove
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelsRemove
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelsRemove
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ChannelsRemove
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelsRemove
</UL>

<P><STRONG><a name="[216]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, regioncommon.o(i.RegionCommonChanMaskCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915InitDefaults
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864InitDefaults
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ChanMaskSet
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920InitDefaults
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChanMaskSet
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433InitDefaults
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChanMaskSet
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779InitDefaults
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ChanMaskSet
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ChanMaskSet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915InitDefaults
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ChanMaskSet
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923InitDefaults
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChanMaskSet
</UL>

<P><STRONG><a name="[28d]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>

<P><STRONG><a name="[21d]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, regioncommon.o(i.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ComputeRxWindowParameters
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ComputeRxWindowParameters
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ComputeRxWindowParameters
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ComputeRxWindowParameters
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[21b]"></a>RegionCommonComputeSymbolTimeFsk</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeFsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionCommonComputeSymbolTimeFsk &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ComputeRxWindowParameters
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ComputeRxWindowParameters
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ComputeRxWindowParameters
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[21c]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionCommonComputeSymbolTimeLoRa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ComputeRxWindowParameters
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ComputeRxWindowParameters
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ComputeRxWindowParameters
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ComputeRxWindowParameters
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[22e]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, regioncommon.o(i.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetContinuousWave
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864TxConfig
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864SetContinuousWave
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433TxConfig
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433SetContinuousWave
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779TxConfig
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779SetContinuousWave
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetContinuousWave
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetContinuousWave
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
</UL>

<P><STRONG><a name="[14f]"></a>RegionCommonCountChannels</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, regioncommon.o(i.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864NextChannel
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779NextChannel
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>

<P><STRONG><a name="[28c]"></a>RegionCommonGetJoinDc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonGetJoinDc))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>

<P><STRONG><a name="[224]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, regioncommon.o(i.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864LinkAdrReq
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433LinkAdrReq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779LinkAdrReq
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
</UL>

<P><STRONG><a name="[223]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonParseLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonParseLinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864LinkAdrReq
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433LinkAdrReq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779LinkAdrReq
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
</UL>

<P><STRONG><a name="[22b]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonSetBandTxDone))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetBandTxDone
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864SetBandTxDone
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetBandTxDone
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433SetBandTxDone
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779SetBandTxDone
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetBandTxDone
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetBandTxDone
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetBandTxDone
</UL>

<P><STRONG><a name="[227]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, regioncommon.o(i.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864NextChannel
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779NextChannel
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
</UL>

<P><STRONG><a name="[a9]"></a>RegionCommonValueInRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonValueInRange))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915Verify
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxParamSetupReq
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864Verify
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864RxParamSetupReq
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ChannelAdd
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920Verify
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxParamSetupReq
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433Verify
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433RxParamSetupReq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelAdd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779Verify
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779RxParamSetupReq
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ChannelAdd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470Verify
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxParamSetupReq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915Verify
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxParamSetupReq
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923Verify
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxParamSetupReq
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
</UL>

<P><STRONG><a name="[19e]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, region.o(i.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ComputeRxWindowParameters
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ComputeRxWindowParameters
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ComputeRxWindowParameters
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ComputeRxWindowParameters
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1d6]"></a>RegionDlChannelReq</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, region.o(i.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionDlChannelReq &rArr; RegionKR920DlChannelReq &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915DlChannelReq
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864DlChannelReq
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920DlChannelReq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868DlChannelReq
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433DlChannelReq
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779DlChannelReq
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470DlChannelReq
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915DlChannelReq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923DlChannelReq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[245]"></a>RegionEU433AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regioneu433.o(i.RegionEU433AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[24d]"></a>RegionEU433ApplyCFList</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, regioneu433.o(i.RegionEU433ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionEU433ApplyCFList &rArr; RegionEU433ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelsRemove
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[257]"></a>RegionEU433ApplyDrOffset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, regioneu433.o(i.RegionEU433ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU433ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[282]"></a>RegionEU433CalcBackOff</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, regioneu433.o(i.RegionEU433CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionEU433CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[287]"></a>RegionEU433ChanMaskSet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regioneu433.o(i.RegionEU433ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionEU433ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[29b]"></a>RegionEU433ChannelAdd</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, regioneu433.o(i.RegionEU433ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU433ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NewChannelReq
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ApplyCFList
</UL>

<P><STRONG><a name="[29c]"></a>RegionEU433ChannelsRemove</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regioneu433.o(i.RegionEU433ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU433ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NewChannelReq
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ApplyCFList
</UL>

<P><STRONG><a name="[28f]"></a>RegionEU433ComputeRxWindowParameters</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, regioneu433.o(i.RegionEU433ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionEU433ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[296]"></a>RegionEU433DlChannelReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regioneu433.o(i.RegionEU433DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionEU433DlChannelReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2c0]"></a>RegionEU433GetNvmCtx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regioneu433.o(i.RegionEU433GetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
</UL>

<P><STRONG><a name="[29f]"></a>RegionEU433GetPhyParam</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, regioneu433.o(i.RegionEU433GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionEU433GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433LinkAdrReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[2a1]"></a>RegionEU433InitDefaults</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, regioneu433.o(i.RegionEU433InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RegionEU433InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[2a2]"></a>RegionEU433LinkAdrReq</STRONG> (Thumb, 368 bytes, Stack size 96 bytes, regioneu433.o(i.RegionEU433LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionEU433LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433GetPhyParam
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2a3]"></a>RegionEU433NewChannelReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, regioneu433.o(i.RegionEU433NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionEU433NewChannelReq &rArr; RegionEU433ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelsRemove
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[2a4]"></a>RegionEU433NextChannel</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, regioneu433.o(i.RegionEU433NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = RegionEU433NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2a5]"></a>RegionEU433RxConfig</STRONG> (Thumb, 266 bytes, Stack size 80 bytes, regioneu433.o(i.RegionEU433RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionEU433RxConfig &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[2a6]"></a>RegionEU433RxParamSetupReq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, regioneu433.o(i.RegionEU433RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionEU433RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[2a7]"></a>RegionEU433SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regioneu433.o(i.RegionEU433SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU433SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[2a8]"></a>RegionEU433SetContinuousWave</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, regioneu433.o(i.RegionEU433SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RegionEU433SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[2aa]"></a>RegionEU433TxConfig</STRONG> (Thumb, 264 bytes, Stack size 88 bytes, regioneu433.o(i.RegionEU433TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = RegionEU433TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2fe]"></a>RegionEU433TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioneu433.o(i.RegionEU433TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[2ab]"></a>RegionEU433Verify</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, regioneu433.o(i.RegionEU433Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionEU433Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[246]"></a>RegionEU868AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[24e]"></a>RegionEU868ApplyCFList</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, regioneu868.o(i.RegionEU868ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionEU868ApplyCFList &rArr; RegionEU868ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[258]"></a>RegionEU868ApplyDrOffset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, regioneu868.o(i.RegionEU868ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU868ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[283]"></a>RegionEU868CalcBackOff</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, regioneu868.o(i.RegionEU868CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionEU868CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[288]"></a>RegionEU868ChanMaskSet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regioneu868.o(i.RegionEU868ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionEU868ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[2ac]"></a>RegionEU868ChannelAdd</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU868ChannelAdd &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>

<P><STRONG><a name="[2ad]"></a>RegionEU868ChannelsRemove</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU868ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>

<P><STRONG><a name="[290]"></a>RegionEU868ComputeRxWindowParameters</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, regioneu868.o(i.RegionEU868ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[297]"></a>RegionEU868DlChannelReq</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU868DlChannelReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2c1]"></a>RegionEU868GetNvmCtx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868GetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
</UL>

<P><STRONG><a name="[2b0]"></a>RegionEU868GetPhyParam</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionEU868GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[2b2]"></a>RegionEU868InitDefaults</STRONG> (Thumb, 260 bytes, Stack size 144 bytes, regioneu868.o(i.RegionEU868InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[2b3]"></a>RegionEU868LinkAdrReq</STRONG> (Thumb, 382 bytes, Stack size 96 bytes, regioneu868.o(i.RegionEU868LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionEU868LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2b4]"></a>RegionEU868NewChannelReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionEU868NewChannelReq &rArr; RegionEU868ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[2b5]"></a>RegionEU868NextChannel</STRONG> (Thumb, 222 bytes, Stack size 80 bytes, regioneu868.o(i.RegionEU868NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = RegionEU868NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2f2]"></a>RegionEU868RxConfig</STRONG> (Thumb, 248 bytes, Stack size 80 bytes, regioneu868.o(i.RegionEU868RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionEU868RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[2b6]"></a>RegionEU868RxParamSetupReq</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU868RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[2b7]"></a>RegionEU868SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU868SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[2b8]"></a>RegionEU868SetContinuousWave</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RegionEU868SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[2ba]"></a>RegionEU868TxConfig</STRONG> (Thumb, 242 bytes, Stack size 88 bytes, regioneu868.o(i.RegionEU868TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = RegionEU868TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2ff]"></a>RegionEU868TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[2bb]"></a>RegionEU868Verify</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU868Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[bd]"></a>RegionGetNvmCtx</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, region.o(i.RegionGetNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionGetNvmCtx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetNvmCtx
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864GetNvmCtx
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetNvmCtx
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetNvmCtx
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433GetNvmCtx
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779GetNvmCtx
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetNvmCtx
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetNvmCtx
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetNvmCtx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[97]"></a>RegionGetPhyParam</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, region.o(i.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864GetPhyParam
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433GetPhyParam
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779GetPhyParam
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckTimeoutRetriesProcess
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNextV10X
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[95]"></a>RegionInitDefaults</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, region.o(i.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915InitDefaults
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864InitDefaults
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920InitDefaults
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433InitDefaults
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779InitDefaults
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915InitDefaults
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923InitDefaults
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckTimeoutRetriesFinalize
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNextV10X
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>

<P><STRONG><a name="[191]"></a>RegionIsActive</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, region.o(i.RegionIsActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionIsActive &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[247]"></a>RegionKR920AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regionkr920.o(i.RegionKR920AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[24f]"></a>RegionKR920ApplyCFList</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, regionkr920.o(i.RegionKR920ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RegionKR920ApplyCFList &rArr; RegionKR920ChannelAdd &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelsRemove
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[259]"></a>RegionKR920ApplyDrOffset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, regionkr920.o(i.RegionKR920ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionKR920ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[284]"></a>RegionKR920CalcBackOff</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, regionkr920.o(i.RegionKR920CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionKR920CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[289]"></a>RegionKR920ChanMaskSet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regionkr920.o(i.RegionKR920ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionKR920ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[2cb]"></a>RegionKR920ChannelAdd</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, regionkr920.o(i.RegionKR920ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RegionKR920ChannelAdd &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NewChannelReq
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyCFList
</UL>

<P><STRONG><a name="[2cc]"></a>RegionKR920ChannelsRemove</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regionkr920.o(i.RegionKR920ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionKR920ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NewChannelReq
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyCFList
</UL>

<P><STRONG><a name="[291]"></a>RegionKR920ComputeRxWindowParameters</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, regionkr920.o(i.RegionKR920ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionKR920ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[298]"></a>RegionKR920DlChannelReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionkr920.o(i.RegionKR920DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionKR920DlChannelReq &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2c2]"></a>RegionKR920GetNvmCtx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regionkr920.o(i.RegionKR920GetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
</UL>

<P><STRONG><a name="[2c5]"></a>RegionKR920GetPhyParam</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, regionkr920.o(i.RegionKR920GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionKR920GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[2c8]"></a>RegionKR920InitDefaults</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, regionkr920.o(i.RegionKR920InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RegionKR920InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[2d0]"></a>RegionKR920LinkAdrReq</STRONG> (Thumb, 368 bytes, Stack size 96 bytes, regionkr920.o(i.RegionKR920LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionKR920LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2d1]"></a>RegionKR920NewChannelReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, regionkr920.o(i.RegionKR920NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RegionKR920NewChannelReq &rArr; RegionKR920ChannelAdd &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelsRemove
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[2d2]"></a>RegionKR920NextChannel</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, regionkr920.o(i.RegionKR920NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = RegionKR920NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2d3]"></a>RegionKR920RxConfig</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, regionkr920.o(i.RegionKR920RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionKR920RxConfig &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[2d4]"></a>RegionKR920RxParamSetupReq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, regionkr920.o(i.RegionKR920RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionKR920RxParamSetupReq &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[2d5]"></a>RegionKR920SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regionkr920.o(i.RegionKR920SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionKR920SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[2d6]"></a>RegionKR920SetContinuousWave</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, regionkr920.o(i.RegionKR920SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RegionKR920SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxEIRP
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[2da]"></a>RegionKR920TxConfig</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, regionkr920.o(i.RegionKR920TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionKR920TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxEIRP
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[300]"></a>RegionKR920TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regionkr920.o(i.RegionKR920TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[2db]"></a>RegionKR920Verify</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, regionkr920.o(i.RegionKR920Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionKR920Verify &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[1d2]"></a>RegionLinkAdrReq</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, region.o(i.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RegionLinkAdrReq &rArr; RegionUS915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864LinkAdrReq
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433LinkAdrReq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779LinkAdrReq
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1d4]"></a>RegionNewChannelReq</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, region.o(i.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RegionNewChannelReq &rArr; RegionKR920NewChannelReq &rArr; RegionKR920ChannelAdd &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NewChannelReq
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864NewChannelReq
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NewChannelReq
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NewChannelReq
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779NewChannelReq
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NewChannelReq
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NewChannelReq
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2e2]"></a>RegionNextChannel</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, region.o(i.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864NextChannel
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779NextChannel
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[249]"></a>RegionRU864AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regionru864.o(i.RegionRU864AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[251]"></a>RegionRU864ApplyCFList</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, regionru864.o(i.RegionRU864ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionRU864ApplyCFList &rArr; RegionRU864ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ChannelsRemove
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[25b]"></a>RegionRU864ApplyDrOffset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, regionru864.o(i.RegionRU864ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionRU864ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[286]"></a>RegionRU864CalcBackOff</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, regionru864.o(i.RegionRU864CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionRU864CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[28b]"></a>RegionRU864ChanMaskSet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regionru864.o(i.RegionRU864ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionRU864ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[2e5]"></a>RegionRU864ChannelAdd</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, regionru864.o(i.RegionRU864ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionRU864ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864NewChannelReq
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ApplyCFList
</UL>

<P><STRONG><a name="[2e6]"></a>RegionRU864ChannelsRemove</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regionru864.o(i.RegionRU864ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionRU864ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864NewChannelReq
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ApplyCFList
</UL>

<P><STRONG><a name="[293]"></a>RegionRU864ComputeRxWindowParameters</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, regionru864.o(i.RegionRU864ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionRU864ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[29a]"></a>RegionRU864DlChannelReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionru864.o(i.RegionRU864DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionRU864DlChannelReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2c4]"></a>RegionRU864GetNvmCtx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regionru864.o(i.RegionRU864GetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
</UL>

<P><STRONG><a name="[2c7]"></a>RegionRU864GetPhyParam</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, regionru864.o(i.RegionRU864GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionRU864GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864LinkAdrReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[2ca]"></a>RegionRU864InitDefaults</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, regionru864.o(i.RegionRU864InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionRU864InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[2dd]"></a>RegionRU864LinkAdrReq</STRONG> (Thumb, 366 bytes, Stack size 96 bytes, regionru864.o(i.RegionRU864LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionRU864LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864GetPhyParam
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2e1]"></a>RegionRU864NewChannelReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, regionru864.o(i.RegionRU864NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionRU864NewChannelReq &rArr; RegionRU864ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ChannelsRemove
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[2e4]"></a>RegionRU864NextChannel</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, regionru864.o(i.RegionRU864NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = RegionRU864NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2ea]"></a>RegionRU864RxConfig</STRONG> (Thumb, 266 bytes, Stack size 80 bytes, regionru864.o(i.RegionRU864RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionRU864RxConfig &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[2eb]"></a>RegionRU864RxParamSetupReq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, regionru864.o(i.RegionRU864RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionRU864RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[2ec]"></a>RegionRU864SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regionru864.o(i.RegionRU864SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionRU864SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[2ed]"></a>RegionRU864SetContinuousWave</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, regionru864.o(i.RegionRU864SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RegionRU864SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[2ef]"></a>RegionRU864TxConfig</STRONG> (Thumb, 264 bytes, Stack size 88 bytes, regionru864.o(i.RegionRU864TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[302]"></a>RegionRU864TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regionru864.o(i.RegionRU864TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[2f0]"></a>RegionRU864Verify</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, regionru864.o(i.RegionRU864Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionRU864Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[1cd]"></a>RegionRxConfig</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, region.o(i.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = RegionRxConfig &rArr; RegionCN470RxConfig &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxConfig
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864RxConfig
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxConfig
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxConfig
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433RxConfig
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779RxConfig
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxConfig
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
</UL>

<P><STRONG><a name="[1d3]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, region.o(i.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionKR920RxParamSetupReq &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxParamSetupReq
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864RxParamSetupReq
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxParamSetupReq
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433RxParamSetupReq
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779RxParamSetupReq
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxParamSetupReq
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxParamSetupReq
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxParamSetupReq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1e4]"></a>RegionSetBandTxDone</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, region.o(i.RegionSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionSetBandTxDone &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetBandTxDone
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864SetBandTxDone
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetBandTxDone
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433SetBandTxDone
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779SetBandTxDone
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetBandTxDone
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetBandTxDone
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetBandTxDone
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
</UL>

<P><STRONG><a name="[2f6]"></a>RegionSetContinuousWave</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, region.o(i.RegionSetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RegionSetContinuousWave &rArr; RegionUS915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetContinuousWave
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864SetContinuousWave
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433SetContinuousWave
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779SetContinuousWave
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetContinuousWave
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetContinuousWave
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
</UL>

<P><STRONG><a name="[2f8]"></a>RegionTxConfig</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, region.o(i.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864TxConfig
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433TxConfig
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779TxConfig
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[1d5]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, region.o(i.RegionTxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionTxParamSetupReq &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxParamSetupReq
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864TxParamSetupReq
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxParamSetupReq
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxParamSetupReq
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433TxParamSetupReq
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779TxParamSetupReq
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxParamSetupReq
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxParamSetupReq
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxParamSetupReq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[248]"></a>RegionUS915AlternateDr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915AlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionUS915AlternateDr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[250]"></a>RegionUS915ApplyCFList</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionUS915ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[25a]"></a>RegionUS915ApplyDrOffset</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, regionus915.o(i.RegionUS915ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionUS915ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[285]"></a>RegionUS915CalcBackOff</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, regionus915.o(i.RegionUS915CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionUS915CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[28a]"></a>RegionUS915ChanMaskSet</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RegionUS915ChanMaskSet &rArr; RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[292]"></a>RegionUS915ComputeRxWindowParameters</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, regionus915.o(i.RegionUS915ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[299]"></a>RegionUS915DlChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionus915.o(i.RegionUS915DlChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2c3]"></a>RegionUS915GetNvmCtx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, regionus915.o(i.RegionUS915GetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
</UL>

<P><STRONG><a name="[2c6]"></a>RegionUS915GetPhyParam</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionUS915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[2c9]"></a>RegionUS915InitDefaults</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, regionus915.o(i.RegionUS915InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionUS915InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[2dc]"></a>RegionUS915LinkAdrReq</STRONG> (Thumb, 646 bytes, Stack size 104 bytes, regionus915.o(i.RegionUS915LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RegionUS915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2e0]"></a>RegionUS915NewChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionus915.o(i.RegionUS915NewChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[2e3]"></a>RegionUS915NextChannel</STRONG> (Thumb, 308 bytes, Stack size 136 bytes, regionus915.o(i.RegionUS915NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = RegionUS915NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeNext125kHzJoinChannel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2f3]"></a>RegionUS915RxConfig</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, regionus915.o(i.RegionUS915RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionUS915RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[2f4]"></a>RegionUS915RxParamSetupReq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionUS915RxParamSetupReq &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[2f5]"></a>RegionUS915SetBandTxDone</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionUS915SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[2f7]"></a>RegionUS915SetContinuousWave</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, regionus915.o(i.RegionUS915SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RegionUS915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[2f9]"></a>RegionUS915TxConfig</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, regionus915.o(i.RegionUS915TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionUS915TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[301]"></a>RegionUS915TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regionus915.o(i.RegionUS915TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[306]"></a>RegionUS915Verify</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionUS915Verify &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[19a]"></a>RegionVerify</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, region.o(i.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionVerify &rArr; RegionKR920Verify &rArr; VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915Verify
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864Verify
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920Verify
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433Verify
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779Verify
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470Verify
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915Verify
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923Verify
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[1a1]"></a>RestoreCtxs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, loramac.o(i.RestoreCtxs))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = RestoreCtxs &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementRestoreNvmCtx
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoRestoreNvmCtx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRestoreNvmCtx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRestoreNvmCtx
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBRestoreNvmCtx
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[14]"></a>SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[15]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[16]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.SPI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[c]"></a>SVC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg_lp_it.o(i.SVC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[30a]"></a>SX126xAntSwOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1262_interface.o(i.SX126xAntSwOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX126xAntSwOff &rArr; HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSleep
</UL>

<P><STRONG><a name="[30b]"></a>SX126xAntSwOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1262_interface.o(i.SX126xAntSwOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX126xAntSwOn &rArr; HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>

<P><STRONG><a name="[316]"></a>SX126xBoardIsTcxoPresent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1262_interface.o(i.SX126xBoardIsTcxoPresent))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[30c]"></a>SX126xCalibrate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sx126x.o(i.SX126xCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xCalibrate &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[30e]"></a>SX126xCalibrateImage</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sx126x.o(i.SX126xCalibrateImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xCalibrateImage &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
</UL>

<P><STRONG><a name="[30f]"></a>SX126xCheckDeviceReady</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx126x.o(i.SX126xCheckDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xAntSwOn
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
</UL>

<P><STRONG><a name="[136]"></a>SX126xClearIrqStatus</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sx126x.o(i.SX126xClearIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xClearIrqStatus &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORAWAN_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[1ea]"></a>SX126xGetBoardTcxoWakeupTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1262_interface.o(i.SX126xGetBoardTcxoWakeupTime))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetWakeupTime
</UL>

<P><STRONG><a name="[1f1]"></a>SX126xGetIrqStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx126x.o(i.SX126xGetIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX126xGetIrqStatus &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[1e9]"></a>SX126xGetOperatingMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx126x.o(i.SX126xGetOperatingMode))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetStatus
</UL>

<P><STRONG><a name="[320]"></a>SX126xGetPaSelect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1262_interface.o(i.SX126xGetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
</UL>

<P><STRONG><a name="[1f4]"></a>SX126xGetPacketStatus</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, sx126x.o(i.SX126xGetPacketStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xGetPacketStatus &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[1fb]"></a>SX126xGetPacketType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx126x.o(i.SX126xGetPacketType))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcSeed
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcPolynomial
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[1f3]"></a>SX126xGetPayload</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sx126x.o(i.SX126xGetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX126xGetPayload &rArr; SX126xGetRxBufferStatus &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[1f6]"></a>SX126xGetRssiInst</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx126x.o(i.SX126xGetRssiInst))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xGetRssiInst &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRssi
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
</UL>

<P><STRONG><a name="[313]"></a>SX126xGetRxBufferStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sx126x.o(i.SX126xGetRxBufferStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xGetRxBufferStatus &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPayload
</UL>

<P><STRONG><a name="[1eb]"></a>SX126xInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx126x.o(i.SX126xInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xInit &rArr; SX126xSetDio3AsTcxoCtrl &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xIoIrqInit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xBoardIsTcxoPresent
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDio3AsTcxoCtrl
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDio2AsRfSwitchCtrl
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCalibrate
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetOperatingMode
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetBoardTcxoWakeupTime
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[48]"></a>SX126xIoDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1262_interface.o(i.SX126xIoDeInit))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>SX126xIoInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1262_interface.o(i.SX126xIoInit))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[315]"></a>SX126xIoIrqInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1262_interface.o(i.SX126xIoIrqInit))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[314]"></a>SX126xReadBuffer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sx1262_interface.o(i.SX126xReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX126xReadBuffer &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPayload
</UL>

<P><STRONG><a name="[312]"></a>SX126xReadCommand</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sx1262_interface.o(i.SX126xReadCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRssiInst
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetIrqStatus
</UL>

<P><STRONG><a name="[1f7]"></a>SX126xReadRegister</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1262_interface.o(i.SX126xReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRead
</UL>

<P><STRONG><a name="[1f8]"></a>SX126xReadRegisters</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sx1262_interface.o(i.SX126xReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadBuffer
</UL>

<P><STRONG><a name="[134]"></a>SX126xReset</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sx1262_interface.o(i.SX126xReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xReset &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORAWAN_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxTimeout
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[1fd]"></a>SX126xSendPayload</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSendPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSendPayload &rArr; SX126xSetPayload &rArr; SX126xWriteBuffer &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPayload
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[1ee]"></a>SX126xSetBufferBaseAddress</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetBufferBaseAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xSetBufferBaseAddress &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[20b]"></a>SX126xSetCad</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX126xSetCad &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
</UL>

<P><STRONG><a name="[31b]"></a>SX126xSetCrcPolynomial</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetCrcPolynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xSetCrcPolynomial &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
</UL>

<P><STRONG><a name="[31c]"></a>SX126xSetCrcSeed</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetCrcSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xSetCrcSeed &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
</UL>

<P><STRONG><a name="[318]"></a>SX126xSetDio2AsRfSwitchCtrl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetDio2AsRfSwitchCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX126xSetDio2AsRfSwitchCtrl &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[317]"></a>SX126xSetDio3AsTcxoCtrl</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetDio3AsTcxoCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xSetDio3AsTcxoCtrl &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[1f0]"></a>SX126xSetDioIrqParams</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, sx126x.o(i.SX126xSetDioIrqParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetDioIrqParams &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[206]"></a>SX126xSetLoRaSymbNumTimeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetLoRaSymbNumTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX126xSetLoRaSymbNumTimeout &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[203]"></a>SX126xSetModulationParams</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, sx126x.o(i.SX126xSetModulationParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SX126xSetModulationParams &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[1f2]"></a>SX126xSetOperatingMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx126x.o(i.SX126xSetOperatingMode))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTx
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSleep
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxDutyCycle
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxBoosted
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRx
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCad
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[31e]"></a>SX126xSetPaConfig</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sx126x.o(i.SX126xSetPaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX126xSetPaConfig &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
</UL>

<P><STRONG><a name="[1fc]"></a>SX126xSetPacketParams</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, sx126x.o(i.SX126xSetPacketParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SX126xSetPacketParams &rArr; SX126xSetCrcSeed &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcSeed
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcPolynomial
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetMaxPayloadLength
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[1ff]"></a>SX126xSetPacketType</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetPacketType))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX126xSetPacketType &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>

<P><STRONG><a name="[319]"></a>SX126xSetPayload</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xSetPayload &rArr; SX126xWriteBuffer &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSendPayload
</UL>

<P><STRONG><a name="[1ed]"></a>SX126xSetRegulatorMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetRegulatorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX126xSetRegulatorMode &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[1fe]"></a>SX126xSetRfFrequency</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, sx126x.o(i.SX126xSetRfFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SX126xSetRfFrequency &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCalibrateImage
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
</UL>

<P><STRONG><a name="[208]"></a>SX126xSetRfTxPower</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1262_interface.o(i.SX126xSetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SX126xSetRfTxPower &rArr; SX126xSetTxParams &rArr; SX126xSetPaConfig &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
</UL>

<P><STRONG><a name="[1f5]"></a>SX126xSetRx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xSetRx &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
</UL>

<P><STRONG><a name="[1fa]"></a>SX126xSetRxBoosted</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetRxBoosted &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
</UL>

<P><STRONG><a name="[207]"></a>SX126xSetRxDutyCycle</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sx126x.o(i.SX126xSetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX126xSetRxDutyCycle &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxDutyCycle
</UL>

<P><STRONG><a name="[20a]"></a>SX126xSetSleep</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xSetSleep &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xAntSwOff
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
</UL>

<P><STRONG><a name="[1ec]"></a>SX126xSetStandby</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX126xSetStandby &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[202]"></a>SX126xSetStopRxTimerOnPreambleDetect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetStopRxTimerOnPreambleDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX126xSetStopRxTimerOnPreambleDetect &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[204]"></a>SX126xSetSyncWord</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetSyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX126xSetSyncWord &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[31a]"></a>SX126xSetTx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xSetTx &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSendPayload
</UL>

<P><STRONG><a name="[209]"></a>SX126xSetTxContinuousWave</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX126xSetTxContinuousWave &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
</UL>

<P><STRONG><a name="[1ef]"></a>SX126xSetTxParams</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetTxParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xSetTxParams &rArr; SX126xSetPaConfig &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPaSelect
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPaConfig
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfTxPower
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[205]"></a>SX126xSetWhiteningSeed</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetWhiteningSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetWhiteningSeed &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[311]"></a>SX126xWaitOnBusy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1262_interface.o(i.SX126xWaitOnBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX126xWaitOnBusy &rArr; HW_GPIO_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
</UL>

<P><STRONG><a name="[310]"></a>SX126xWakeup</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sx1262_interface.o(i.SX126xWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[31f]"></a>SX126xWriteBuffer</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sx1262_interface.o(i.SX126xWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX126xWriteBuffer &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPayload
</UL>

<P><STRONG><a name="[30d]"></a>SX126xWriteCommand</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sx1262_interface.o(i.SX126xWriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xClearIrqStatus
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPaConfig
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDio3AsTcxoCtrl
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDio2AsRfSwitchCtrl
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCalibrateImage
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCalibrate
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxContinuousWave
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTx
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStopRxTimerOnPreambleDetect
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSleep
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxDutyCycle
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxBoosted
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRx
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRegulatorMode
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetLoRaSymbNumTimeout
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCad
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetBufferBaseAddress
</UL>

<P><STRONG><a name="[200]"></a>SX126xWriteRegister</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1262_interface.o(i.SX126xWriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxBoosted
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWrite
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
</UL>

<P><STRONG><a name="[1f9]"></a>SX126xWriteRegisters</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sx1262_interface.o(i.SX126xWriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcSeed
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcPolynomial
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSyncWord
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWriteBuffer
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
</UL>

<P><STRONG><a name="[16a]"></a>SecureElementAesEncrypt</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, soft-se.o(i.SecureElementAesEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SecureElementAesEncrypt &rArr; aes_set_key &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyByID
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[a4]"></a>SecureElementComputeAesCmac</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, soft-se.o(i.SecureElementComputeAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmacB0
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[b3]"></a>SecureElementDeriveAndStoreKey</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, soft-se.o(i.SecureElementDeriveAndStoreKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_set_key &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
</UL>

<P><STRONG><a name="[be]"></a>SecureElementGetNvmCtx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, soft-se.o(i.SecureElementGetNvmCtx))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCtxs
</UL>

<P><STRONG><a name="[195]"></a>SecureElementInit</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, soft-se.o(i.SecureElementInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SecureElementInit &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[171]"></a>SecureElementRandomNumber</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, soft-se.o(i.SecureElementRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[307]"></a>SecureElementRestoreNvmCtx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, soft-se.o(i.SecureElementRestoreNvmCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SecureElementRestoreNvmCtx &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
</UL>

<P><STRONG><a name="[178]"></a>SecureElementSetKey</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, soft-se.o(i.SecureElementSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_set_key &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
</UL>

<P><STRONG><a name="[16c]"></a>SecureElementVerifyAesCmac</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, soft-se.o(i.SecureElementVerifyAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[19b]"></a>Send</STRONG> (Thumb, 436 bytes, Stack size 80 bytes, loramac.o(i.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[323]"></a>SendFrameOnChannel</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, loramac.o(i.SendFrameOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBStopRxSlots
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsUplinkCollision
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconModeActive
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBHaltBeaconing
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1a6]"></a>SendReJoinReq</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, loramac.o(i.SendReJoinReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = SendReJoinReq &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1a7]"></a>SetTxContinuousWave</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, loramac.o(i.SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SetTxContinuousWave &rArr; RegionSetContinuousWave &rArr; RegionUS915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1a8]"></a>SetTxContinuousWave1</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, loramac.o(i.SetTxContinuousWave1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetTxContinuousWave1
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[e]"></a>SysTick_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.SysTick_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_IRQHandler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[1d8]"></a>SysTimeAdd</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, systime.o(i.SysTimeAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1c2]"></a>SysTimeGet</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, systime.o(i.SysTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SysTimeGet &rArr; HW_RTC_GetCalendarTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_BKUPRead
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1d9]"></a>SysTimeSet</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, systime.o(i.SysTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SysTimeSet &rArr; HW_RTC_GetCalendarTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_BKUPWrite
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1d7]"></a>SysTimeSub</STRONG> (Thumb, 78 bytes, Stack size 28 bytes, systime.o(i.SysTimeSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[32b]"></a>SystemClockConfig</STRONG> (Thumb, 410 bytes, Stack size 16 bytes, system_bluenrg_lp.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SystemClockConfig &rArr; SystemTimer_TimeoutConfig &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutExpired
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSCFG_GetDeviceVersion
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRC64MPLLPrescaler
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_SetWaitStates
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[32d]"></a>SystemInit</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, system_bluenrg_lp.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SystemInit &rArr; SmpsTrimConfig &rArr; SystemTimer_TimeoutConfig &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInterruptPriority
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioClockConfig
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MrBleBiasTrimConfig
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpsTrimConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSConfig
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableRAMBankRet
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>SystemTimer_TimeoutConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, system_bluenrg_lp.o(i.SystemTimer_TimeoutConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemTimer_TimeoutConfig &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpsTrimConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSConfig
</UL>

<P><STRONG><a name="[14b]"></a>SystemTimer_TimeoutExpired</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.SystemTimer_TimeoutExpired))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpsTrimConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSConfig
</UL>

<P><STRONG><a name="[19]"></a>TIM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.TIM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[194]"></a>TimerGetCurrentTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timeserver.o(i.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TimerGetCurrentTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[9b]"></a>TimerGetElapsedTime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timeserver.o(i.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864NextChannel
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779NextChannel
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[193]"></a>TimerInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timeserver.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_certif_running
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[1e6]"></a>TimerIrqHandler</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, timeserver.o(i.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerContext
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1e3]"></a>TimerSetValue</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, timeserver.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_certif_running
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
</UL>

<P><STRONG><a name="[1c7]"></a>TimerStart</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, timeserver.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertTimer
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_certif_running
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_tx
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSensorsTimerEvent
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
</UL>

<P><STRONG><a name="[187]"></a>TimerStop</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, timeserver.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_certif_running
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[100]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, rf_driver_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[101]"></a>UART_CheckIdleState</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rf_driver_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ff]"></a>UART_SetConfig</STRONG> (Thumb, 902 bytes, Stack size 64 bytes, rf_driver_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_SetConfig &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[103]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, rf_driver_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1d]"></a>UPCONV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.UPCONV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[17]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[337]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[36e]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[99]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RequestClass
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_certif_running
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRegion
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_ConfirmClass
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCertifTxNextPacketTimerEvent
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_DownLinkIncrement
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemperatureHTS221
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPressure
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHumidity
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864TxConfig
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864RxConfig
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxConfig
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433TxConfig
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433RxConfig
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779TxConfig
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779RxConfig
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcNextV10X
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioOnRxTimeoutIrq
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[36f]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[370]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[339]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[371]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1cb]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
</UL>

<P><STRONG><a name="[372]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[373]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[87]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[11d]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rtc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
</UL>

<P><STRONG><a name="[c5]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lora.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFCntDown
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864GetPhyParam
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433GetPhyParam
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779GetPhyParam
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFCntDown
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastFcntDown
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetNvmCtx
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[351]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[33a]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1e5]"></a>__low_level_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, system_bluenrg_lp.o(i.__low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[33c]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[33d]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[33e]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[33f]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[341]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[374]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[375]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[376]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[34f]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[8e]"></a>aes_encrypt</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>

<P><STRONG><a name="[92]"></a>aes_set_key</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, aes.o(i.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = aes_set_key &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block_nn
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
</UL>

<P><STRONG><a name="[14d]"></a>calibrateHumidity</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, ht_sensors.o(i.calibrateHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = calibrateHumidity &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSP22HB_Init
</UL>

<P><STRONG><a name="[105]"></a>calibrateTemperatureHTS221</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, ht_sensors.o(i.calibrateTemperatureHTS221))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = calibrateTemperatureHTS221 &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[20d]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[1bb]"></a>certif_DownLinkIncrement</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lora-test.o(i.certif_DownLinkIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = certif_DownLinkIncrement &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[1bd]"></a>certif_linkCheck</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lora-test.o(i.certif_linkCheck))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[1bc]"></a>certif_rx</STRONG> (Thumb, 598 bytes, Stack size 64 bytes, lora-test.o(i.certif_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = certif_rx &rArr; certif_tx &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_certif_running
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRegion
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_tx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[20f]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[42]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[13e]"></a>getRegion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lorawan_setup.o(i.getRegion))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
</UL>

<P><STRONG><a name="[146]"></a>get_certif_running</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora-test.o(i.get_certif_running))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[34c]"></a>initSensors</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht_sensors.o(i.initSensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = initSensors &rArr; initTimer &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSP22HB_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34d]"></a>initTimer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht_sensors.o(i.initTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = initTimer &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors
</UL>

<P><STRONG><a name="[1cc]"></a>lorawan_send</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lorawan_setup.o(i.lorawan_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lorawan_send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_JoinStatus
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txLora
</UL>

<P><STRONG><a name="[29]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = main &rArr; LORAWAN_tick &rArr; LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORAWAN_tick
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORAWAN_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHandler_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8f]"></a>memcpy1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utils.o(i.memcpy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementRestoreNvmCtx
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915InitDefaults
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864InitDefaults
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ChannelAdd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920InitDefaults
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433InitDefaults
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelAdd
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779InitDefaults
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ChannelAdd
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915InitDefaults
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923InitDefaults
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoRestoreNvmCtx
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRestoreNvmCtx
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRestoreNvmCtx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCtxs
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[16d]"></a>memcpyr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, utils.o(i.memcpyr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[8d]"></a>memset1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utils.o(i.memset1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864LinkAdrReq
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433LinkAdrReq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779LinkAdrReq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMacCommandSlot
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
</UL>

<P><STRONG><a name="[31d]"></a>pow</STRONG> (Thumb, 2548 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
</UL>

<P><STRONG><a name="[352]"></a>rand1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, utils.o(i.rand1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rand1 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[a7]"></a>randr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, utils.o(i.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864NextChannel
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864GetPhyParam
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433GetPhyParam
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779NextChannel
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779GetPhyParam
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeNext125kHzJoinChannel
</UL>

<P><STRONG><a name="[1c5]"></a>readHumidity</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, ht_sensors.o(i.readHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = readHumidity &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSensorsTimerEvent
</UL>

<P><STRONG><a name="[1c6]"></a>readPressure</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, ht_sensors.o(i.readPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = readPressure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSensorsTimerEvent
</UL>

<P><STRONG><a name="[1c4]"></a>readTemperatureHTS221</STRONG> (Thumb, 246 bytes, Stack size 72 bytes, ht_sensors.o(i.readTemperatureHTS221))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = readTemperatureHTS221 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSensorsTimerEvent
</UL>

<P><STRONG><a name="[20c]"></a>rint</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rint.o(i.rint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rint &rArr; _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[32f]"></a>setInterruptPriority</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, system_bluenrg_lp.o(i.setInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setInterruptPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[135]"></a>setRegion</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lorawan_setup.o(i.setRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setRegion &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORAWAN_init
</UL>

<P><STRONG><a name="[34b]"></a>set_certif_running</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lorawan_setup.o(i.set_certif_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = set_certif_running &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
</UL>

<P><STRONG><a name="[350]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[197]"></a>srand1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utils.o(i.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1c8]"></a>txLora</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ht_sensors.o(i.txLora))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = txLora &rArr; lorawan_send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSensorsTimerEvent
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[111]"></a>HW_RTC_GetCalendarValue</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, rtc.o(i.HW_RTC_GetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarTime
</UL>

<P><STRONG><a name="[116]"></a>HW_RTC_SetAlarmConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtc.o(i.HW_RTC_SetAlarmConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_RTC_SetAlarmConfig &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[119]"></a>HW_RTC_StartWakeUpAlarm</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, rtc.o(i.HW_RTC_StartWakeUpAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[6]"></a>LORA_ConfirmClass</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lorawan_setup.o(i.LORA_ConfirmClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LORA_ConfirmClass &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_setup.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>LORA_HasJoined</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_setup.o(i.LORA_HasJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LORA_HasJoined &rArr; LORA_RequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; SwitchClass &rArr; RegionComputeRxWindowParameters &rArr; RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RequestClass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_setup.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>LORA_RxData</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lorawan_setup.o(i.LORA_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LORA_RxData &rArr; LORA_RequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; SwitchClass &rArr; RegionComputeRxWindowParameters &rArr; RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RequestClass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_setup.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>LORA_TxNeeded</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lorawan_setup.o(i.LORA_TxNeeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LORA_TxNeeded &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_setup.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>LoraMacProcessNotify</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lorawan_setup.o(i.LoraMacProcessNotify))
<BR>[Address Reference Count : 1]<UL><LI> lorawan_setup.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>OnTxTimerEvent</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, lorawan_setup.o(i.OnTxTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = OnTxTimerEvent &rArr; lorawan_send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_send
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_setup.o(i.set_certif_running)
</UL>
<P><STRONG><a name="[12e]"></a>LL_AHB_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bluenrg_lp_hal_msp.o(i.LL_AHB_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHandler_Config
</UL>

<P><STRONG><a name="[f4]"></a>LL_APB1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bluenrg_lp_hal_msp.o(i.LL_APB1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[45]"></a>OnSensorsTimerEvent</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ht_sensors.o(i.OnSensorsTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = OnSensorsTimerEvent &rArr; txLora &rArr; lorawan_send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txLora
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemperatureHTS221
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPressure
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHumidity
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ht_sensors.o(i.initTimer)
</UL>
<P><STRONG><a name="[2c]"></a>McpsConfirm</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lora.o(i.McpsConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = McpsConfirm &rArr; TraceUpLinkFrame &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceUpLinkFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora.o(i.LORA_Init)
</UL>
<P><STRONG><a name="[2d]"></a>McpsIndication</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lora.o(i.McpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = McpsIndication &rArr; certif_rx &rArr; certif_tx &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_certif_running
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_DownLinkIncrement
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora.o(i.LORA_Init)
</UL>
<P><STRONG><a name="[2e]"></a>MlmeConfirm</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lora.o(i.MlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MlmeConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_certif_running
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_linkCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora.o(i.LORA_Init)
</UL>
<P><STRONG><a name="[2f]"></a>MlmeIndication</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lora.o(i.MlmeIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MlmeIndication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora.o(i.LORA_Init)
</UL>
<P><STRONG><a name="[1ba]"></a>TraceUpLinkFrame</STRONG> (Thumb, 30 bytes, Stack size 72 bytes, lora.o(i.TraceUpLinkFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TraceUpLinkFrame &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm
</UL>

<P><STRONG><a name="[44]"></a>OnCertifTxNextPacketTimerEvent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lora-test.o(i.OnCertifTxNextPacketTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = OnCertifTxNextPacketTimerEvent &rArr; certif_tx &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_tx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora-test.o(i.certif_rx)
</UL>
<P><STRONG><a name="[1c1]"></a>certif_tx</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, lora-test.o(i.certif_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = certif_tx &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCertifTxNextPacketTimerEvent
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
</UL>

<P><STRONG><a name="[345]"></a>add_round_key</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aes.o(i.add_round_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_round_key
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[347]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, aes.o(i.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[34e]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, aes.o(i.copy_block))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
</UL>

<P><STRONG><a name="[34a]"></a>copy_block_nn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes.o(i.copy_block_nn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>

<P><STRONG><a name="[348]"></a>mix_sub_columns</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, aes.o(i.mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[349]"></a>shift_sub_rows</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, aes.o(i.shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[346]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(i.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>

<P><STRONG><a name="[a0]"></a>ComputeCmac</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, soft-se.o(i.ComputeCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyByID
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
</UL>

<P><STRONG><a name="[41]"></a>DummyCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, soft-se.o(i.DummyCB))
<BR>[Address Reference Count : 1]<UL><LI> soft-se.o(i.SecureElementInit)
</UL>
<P><STRONG><a name="[94]"></a>AckTimeoutRetriesFinalize</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, loramac.o(i.AckTimeoutRetriesFinalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = AckTimeoutRetriesFinalize &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[96]"></a>AckTimeoutRetriesProcess</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, loramac.o(i.AckTimeoutRetriesProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = AckTimeoutRetriesProcess &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[9a]"></a>CalculateBackOff</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, loramac.o(i.CalculateBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CalculateBackOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[b5]"></a>CallNvmCtxCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, loramac.o(i.CallNvmCtxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CallNvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventSecureElementNvmCtxChanged
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRegionNvmCtxChanged
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventMacNvmCtxChanged
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCryptoNvmCtxChanged
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventConfirmQueueNvmCtxChanged
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCommandsNvmCtxChanged
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventClassBNvmCtxChanged
</UL>

<P><STRONG><a name="[186]"></a>CheckRetransConfirmedUplink</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, loramac.o(i.CheckRetransConfirmedUplink))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[185]"></a>CheckRetransUnconfirmedUplink</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, loramac.o(i.CheckRetransUnconfirmedUplink))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[3e]"></a>EventClassBNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(i.EventClassBNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventClassBNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3d]"></a>EventCommandsNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(i.EventCommandsNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventCommandsNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[31]"></a>EventConfirmQueueNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(i.EventConfirmQueueNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventConfirmQueueNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3c]"></a>EventCryptoNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(i.EventCryptoNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventCryptoNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[b6]"></a>EventMacNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(i.EventMacNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventMacNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[b7]"></a>EventRegionNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(i.EventRegionNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventRegionNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[3b]"></a>EventSecureElementNvmCtxChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loramac.o(i.EventSecureElementNvmCtxChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventSecureElementNvmCtxChanged &rArr; CallNvmCtxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmCtxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[c4]"></a>GetFCntDown</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, loramac.o(i.GetFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GetFCntDown &rArr; LoRaMacCryptoGetFCntDown &rArr; GetLastFcntDown &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[c7]"></a>GetMaxAppPayloadWithoutFOptsLength</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, loramac.o(i.GetMaxAppPayloadWithoutFOptsLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GetMaxAppPayloadWithoutFOptsLength &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
</UL>

<P><STRONG><a name="[11f]"></a>HandleRadioRxErrorTimeout</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, loramac.o(i.HandleRadioRxErrorTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HandleRadioRxErrorTimeout &rArr; LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxTimeout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxError
</UL>

<P><STRONG><a name="[1ad]"></a>IsRequestPending</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, loramac.o(i.IsRequestPending))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[153]"></a>LoRaMacCheckForBeaconAcquisition</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacCheckForBeaconAcquisition))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacCheckForBeaconAcquisition &rArr; LoRaMacConfirmQueueIsCmdActive &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1ac]"></a>LoRaMacCheckForRxAbort</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, loramac.o(i.LoRaMacCheckForRxAbort))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[18b]"></a>LoRaMacEnableRequests</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.LoRaMacEnableRequests))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1ae]"></a>LoRaMacHandleIndicationEvents</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, loramac.o(i.LoRaMacHandleIndicationEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacHandleIndicationEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[17e]"></a>LoRaMacHandleIrqEvents</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacHandleIrqEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxTimeout
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxTimeout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxError
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[184]"></a>LoRaMacHandleMcpsRequest</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacHandleMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = LoRaMacHandleMcpsRequest &rArr; OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetransUnconfirmedUplink
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetransConfirmedUplink
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckTimeoutRetriesProcess
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckTimeoutRetriesFinalize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[189]"></a>LoRaMacHandleMlmeRequest</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacHandleMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoRaMacHandleMlmeRequest &rArr; LoRaMacConfirmQueueGetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[18a]"></a>LoRaMacHandleRequestEvents</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacHandleRequestEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacHandleRequestEvents &rArr; LoRaMacConfirmQueueHandleCb &rArr; LoRaMacConfirmQueueRemoveFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacEnableRequests
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBResumeBeaconing
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[18e]"></a>LoRaMacHandleScheduleUplinkEvent</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacHandleScheduleUplinkEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacHandleScheduleUplinkEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsStickyCmdsPending
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMlmeScheduleUplinkIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[35]"></a>OnAckTimeoutTimerEvent</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, loramac.o(i.OnAckTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OnAckTimeoutTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[37]"></a>OnRadioRxDone</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, loramac.o(i.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = OnRadioRxDone &rArr; TimerGetCurrentTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[38]"></a>OnRadioRxError</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, loramac.o(i.OnRadioRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnRadioRxError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3a]"></a>OnRadioRxTimeout</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, loramac.o(i.OnRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnRadioRxTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[36]"></a>OnRadioTxDone</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, loramac.o(i.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = OnRadioTxDone &rArr; SysTimeGet &rArr; HW_RTC_GetCalendarTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[39]"></a>OnRadioTxTimeout</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, loramac.o(i.OnRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnRadioTxTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[33]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, loramac.o(i.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OnRxWindow1TimerEvent &rArr; RxWindowSetup &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[34]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, loramac.o(i.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[32]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, loramac.o(i.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[19f]"></a>OpenContinuousRxCWindow</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, loramac.o(i.OpenContinuousRxCWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = OpenContinuousRxCWindow &rArr; RegionRxConfig &rArr; RegionCN470RxConfig &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
</UL>

<P><STRONG><a name="[1d0]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, loramac.o(i.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PrepareRxDoneAbort &rArr; OnAckTimeoutTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[1d1]"></a>ProcessMacCommands</STRONG> (Thumb, 1964 bytes, Stack size 96 bytes, loramac.o(i.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ProcessMacCommands &rArr; RegionLinkAdrReq &rArr; RegionUS915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotInfoAns
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotChannelReq
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBDeviceTimeAns
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimingAns
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconFreqReq
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMlmeScheduleUplinkIndication
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[180]"></a>ProcessRadioRxDone</STRONG> (Thumb, 1868 bytes, Stack size 176 bytes, loramac.o(i.ProcessRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = ProcessRadioRxDone &rArr; LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFCntDown
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBRxBeacon
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineFrameType
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveMacCommands
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[182]"></a>ProcessRadioRxError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, loramac.o(i.ProcessRadioRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProcessRadioRxError &rArr; HandleRadioRxErrorTimeout &rArr; LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[183]"></a>ProcessRadioRxTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, loramac.o(i.ProcessRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProcessRadioRxTimeout &rArr; HandleRadioRxErrorTimeout &rArr; LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[17f]"></a>ProcessRadioTxDone</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, loramac.o(i.ProcessRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ProcessRadioTxDone &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[181]"></a>ProcessRadioTxTimeout</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, loramac.o(i.ProcessRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ProcessRadioTxTimeout &rArr; SX126xReset &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[1e2]"></a>RemoveMacCommands</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, loramac.o(i.RemoveMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RemoveMacCommands &rArr; LoRaMacCommandsRemoveStickyAnsCmds &rArr; LoRaMacCommandsRemoveCmd &rArr; LinkedListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[192]"></a>ResetMacParameters</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, loramac.o(i.ResetMacParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1c3]"></a>RxWindowSetup</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, loramac.o(i.RxWindowSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RxWindowSetup &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>

<P><STRONG><a name="[1c9]"></a>ScheduleTx</STRONG> (Thumb, 504 bytes, Stack size 48 bytes, loramac.o(i.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionRU864TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[322]"></a>SecureFrame</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, loramac.o(i.SecureFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; ComputeCmacB0 &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntUp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[190]"></a>SetMlmeScheduleUplinkIndication</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, loramac.o(i.SetMlmeScheduleUplinkIndication))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleScheduleUplinkEvent
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[188]"></a>StopRetransmission</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, loramac.o(i.StopRetransmission))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[19d]"></a>SwitchClass</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, loramac.o(i.SwitchClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SwitchClass &rArr; RegionComputeRxWindowParameters &rArr; RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSwitchClass
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[12a]"></a>UpdateRxSlotIdleState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, loramac.o(i.UpdateRxSlotIdleState))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxTimeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>

<P><STRONG><a name="[321]"></a>ValidatePayloadLength</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, loramac.o(i.ValidatePayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ValidatePayloadLength &rArr; GetMaxAppPayloadWithoutFOptsLength &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[98]"></a>CalcNextV10X</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, loramacadr.o(i.CalcNextV10X))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = CalcNextV10X &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
</UL>

<P><STRONG><a name="[b8]"></a>FreeMacCommandSlot</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, loramaccommands.o(i.FreeMacCommandSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FreeMacCommandSlot &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>

<P><STRONG><a name="[1b9]"></a>IsSlotFree</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, loramaccommands.o(i.IsSlotFree))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocNewMacCommandSlot
</UL>

<P><STRONG><a name="[157]"></a>IsSticky</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, loramaccommands.o(i.IsSticky))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
</UL>

<P><STRONG><a name="[156]"></a>LinkedListAdd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, loramaccommands.o(i.LinkedListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
</UL>

<P><STRONG><a name="[151]"></a>LinkedListGetPrevious</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, loramaccommands.o(i.LinkedListGetPrevious))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkedListRemove
</UL>

<P><STRONG><a name="[15a]"></a>LinkedListInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, loramaccommands.o(i.LinkedListInit))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
</UL>

<P><STRONG><a name="[150]"></a>LinkedListRemove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, loramaccommands.o(i.LinkedListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinkedListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkedListGetPrevious
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>

<P><STRONG><a name="[155]"></a>MallocNewMacCommandSlot</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, loramaccommands.o(i.MallocNewMacCommandSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MallocNewMacCommandSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSlotFree
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
</UL>

<P><STRONG><a name="[158]"></a>NvmCtxCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, loramaccommands.o(i.NvmCtxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NvmCtxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
</UL>

<P><STRONG><a name="[c2]"></a>GetElement</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, loramacconfirmqueue.o(i.GetElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
</UL>

<P><STRONG><a name="[c3]"></a>IncreaseBufferPointer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.IncreaseBufferPointer))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRemoveFirst
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
</UL>

<P><STRONG><a name="[9e]"></a>CheckFCntDown</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, loramaccrypto.o(i.CheckFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CheckFCntDown &rArr; GetLastFcntDown &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastFcntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[a2]"></a>ComputeCmacB0</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, loramaccrypto.o(i.ComputeCmacB0))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ComputeCmacB0 &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareB0
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[b2]"></a>DeriveSessionKey10x</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, loramaccrypto.o(i.DeriveSessionKey10x))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = DeriveSessionKey10x &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_set_key &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[30]"></a>DummyCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramaccrypto.o(i.DummyCB))
<BR>[Address Reference Count : 1]<UL><LI> loramaccrypto.o(i.LoRaMacCryptoInit)
</UL>
<P><STRONG><a name="[17b]"></a>GetKeyAddrItem</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, loramaccrypto.o(i.GetKeyAddrItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyAddrItem
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[9f]"></a>GetLastFcntDown</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, loramaccrypto.o(i.GetLastFcntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetLastFcntDown &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFCntDown
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntDown
</UL>

<P><STRONG><a name="[175]"></a>PayloadEncrypt</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, loramaccrypto.o(i.PayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = PayloadEncrypt &rArr; SecureElementAesEncrypt &rArr; aes_set_key &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[a3]"></a>PrepareB0</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, loramaccrypto.o(i.PrepareB0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PrepareB0
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmacB0
</UL>

<P><STRONG><a name="[16f]"></a>ResetFCnts</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, loramaccrypto.o(i.ResetFCnts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ResetFCnts
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
</UL>

<P><STRONG><a name="[17d]"></a>UpdateFCntDown</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, loramaccrypto.o(i.UpdateFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UpdateFCntDown &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[17c]"></a>VerifyCmacB0</STRONG> (Thumb, 120 bytes, Stack size 312 bytes, loramaccrypto.o(i.VerifyCmacB0))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareB0
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[a8]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, regionas923.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CountNbOfEnabledChannels &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
</UL>

<P><STRONG><a name="[21a]"></a>GetBandwidth</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regionas923.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[220]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionas923.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>

<P><STRONG><a name="[22d]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regionas923.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
</UL>

<P><STRONG><a name="[217]"></a>VerifyRfFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, regionas923.o(i.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923Verify
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxParamSetupReq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923DlChannelReq
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
</UL>

<P><STRONG><a name="[aa]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, regionau915.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CountNbOfEnabledChannels &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
</UL>

<P><STRONG><a name="[234]"></a>GetBandwidth</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regionau915.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[236]"></a>GetNextLowerTxDr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, regionau915.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
</UL>

<P><STRONG><a name="[23e]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regionau915.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetContinuousWave
</UL>

<P><STRONG><a name="[23b]"></a>VerifyRfFreq</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, regionau915.o(i.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915Verify
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxParamSetupReq
</UL>

<P><STRONG><a name="[ab]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, regioncn470.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CountNbOfEnabledChannels &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
</UL>

<P><STRONG><a name="[25f]"></a>GetBandwidth</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regioncn470.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[261]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regioncn470.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>

<P><STRONG><a name="[26a]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regioncn470.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetContinuousWave
</UL>

<P><STRONG><a name="[267]"></a>VerifyRfFreq</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, regioncn470.o(i.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470Verify
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxParamSetupReq
</UL>

<P><STRONG><a name="[ac]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, regioncn779.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CountNbOfEnabledChannels &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779NextChannel
</UL>

<P><STRONG><a name="[273]"></a>GetBandwidth</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regioncn779.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779TxConfig
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[276]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regioncn779.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779GetPhyParam
</UL>

<P><STRONG><a name="[27f]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regioncn779.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779TxConfig
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779SetContinuousWave
</UL>

<P><STRONG><a name="[271]"></a>VerifyRfFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, regioncn779.o(i.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779Verify
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779RxParamSetupReq
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779DlChannelReq
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN779ChannelAdd
</UL>

<P><STRONG><a name="[28e]"></a>CountChannels</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, regioncommon.o(i.CountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>

<P><STRONG><a name="[ad]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, regioneu433.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CountNbOfEnabledChannels &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
</UL>

<P><STRONG><a name="[29e]"></a>GetBandwidth</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regioneu433.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433TxConfig
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2a0]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regioneu433.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433GetPhyParam
</UL>

<P><STRONG><a name="[2a9]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regioneu433.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433TxConfig
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433SetContinuousWave
</UL>

<P><STRONG><a name="[29d]"></a>VerifyRfFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, regioneu433.o(i.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433Verify
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433RxParamSetupReq
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433DlChannelReq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelAdd
</UL>

<P><STRONG><a name="[ae]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, regioneu868.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[2af]"></a>GetBandwidth</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regioneu868.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2b1]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regioneu868.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>

<P><STRONG><a name="[2b9]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regioneu868.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
</UL>

<P><STRONG><a name="[2ae]"></a>VerifyRfFreq</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, regioneu868.o(i.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868DlChannelReq
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>

<P><STRONG><a name="[af]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, regionkr920.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CountNbOfEnabledChannels &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
</UL>

<P><STRONG><a name="[2ce]"></a>GetBandwidth</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regionkr920.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2d8]"></a>GetMaxEIRP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, regionkr920.o(i.GetMaxEIRP))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
</UL>

<P><STRONG><a name="[2cf]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionkr920.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
</UL>

<P><STRONG><a name="[2d7]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regionkr920.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
</UL>

<P><STRONG><a name="[2cd]"></a>VerifyRfFreq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, regionkr920.o(i.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920Verify
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxParamSetupReq
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920DlChannelReq
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
</UL>

<P><STRONG><a name="[b0]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, regionru864.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CountNbOfEnabledChannels &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864NextChannel
</UL>

<P><STRONG><a name="[2e8]"></a>GetBandwidth</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regionru864.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864TxConfig
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2e9]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionru864.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864GetPhyParam
</UL>

<P><STRONG><a name="[2ee]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regionru864.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864TxConfig
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864SetContinuousWave
</UL>

<P><STRONG><a name="[2e7]"></a>VerifyRfFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, regionru864.o(i.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864Verify
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864RxParamSetupReq
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864DlChannelReq
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRU864ChannelAdd
</UL>

<P><STRONG><a name="[a5]"></a>ComputeNext125kHzJoinChannel</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, regionus915.o(i.ComputeNext125kHzJoinChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ComputeNext125kHzJoinChannel &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAvailable125kHzChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
</UL>

<P><STRONG><a name="[b1]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, regionus915.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CountNbOfEnabledChannels &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
</UL>

<P><STRONG><a name="[a6]"></a>FindAvailable125kHzChannels</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, regionus915.o(i.FindAvailable125kHzChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindAvailable125kHzChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeNext125kHzJoinChannel
</UL>

<P><STRONG><a name="[303]"></a>GetBandwidth</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regionus915.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[304]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionus915.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
</UL>

<P><STRONG><a name="[14e]"></a>LimitTxPower</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, regionus915.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LimitTxPower &rArr; RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetContinuousWave
</UL>

<P><STRONG><a name="[305]"></a>VerifyRfFreq</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, regionus915.o(i.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VerifyRfFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915Verify
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxParamSetupReq
</UL>

<P><STRONG><a name="[201]"></a>RadioGetFskBandwidthRegValue</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, radio.o(i.RadioGetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[107]"></a>LL_AHB_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_wrappers.o(i.LL_AHB_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
</UL>

<P><STRONG><a name="[334]"></a>TimerExists</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timeserver.o(i.TimerExists))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[330]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timeserver.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[336]"></a>TimerInsertTimer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timeserver.o(i.TimerInsertTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsertTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[331]"></a>TimerSetTimeout</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[335]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timeserver.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[e2]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rf_driver_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[cb]"></a>LL_EXTI_ClearInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf_driver_hal_exti.o(i.LL_EXTI_ClearInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_ClearPending
</UL>

<P><STRONG><a name="[cc]"></a>LL_EXTI_IsInterruptPending</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rf_driver_hal_exti.o(i.LL_EXTI_IsInterruptPending))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_GetPending
</UL>

<P><STRONG><a name="[ce]"></a>LL_EXTI_SetTrigger</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, rf_driver_hal_exti.o(i.LL_EXTI_SetTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_SetConfigLine
</UL>

<P><STRONG><a name="[2a]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rf_driver_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_driver_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[f7]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rf_driver_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[309]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, rf_driver_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[f6]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rf_driver_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[fb]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, rf_driver_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UARTEx_SetNbDataToProcess &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[12c]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rf_driver_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[12b]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, rf_driver_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[d3]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, rf_driver_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[d7]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, rf_driver_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[d4]"></a>I2C_TransferConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, rf_driver_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[d2]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rf_driver_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[d5]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rf_driver_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[d8]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rf_driver_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[32c]"></a>LL_FLASH_SetWaitStates</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LL_FLASH_SetWaitStates))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[32e]"></a>LL_PWR_EnableRAMBankRet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LL_PWR_EnableRAMBankRet))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1bf]"></a>LL_RCC_SetRC64MPLLPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LL_RCC_SetRC64MPLLPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MrBleBiasTrimConfig
</UL>

<P><STRONG><a name="[1c0]"></a>LL_RCC_SetRFClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LL_RCC_SetRFClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioClockConfig
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MrBleBiasTrimConfig
</UL>

<P><STRONG><a name="[1e8]"></a>LL_SYSCFG_GetDeviceVersion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LL_SYSCFG_GetDeviceVersion))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioClockConfig
</UL>

<P><STRONG><a name="[149]"></a>LSConfig</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, system_bluenrg_lp.o(i.LSConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LSConfig &rArr; SystemTimer_TimeoutConfig &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutExpired
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[328]"></a>SmpsTrimConfig</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, system_bluenrg_lp.o(i.SmpsTrimConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SmpsTrimConfig &rArr; SystemTimer_TimeoutConfig &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutExpired
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[353]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_bluenrg_lp.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInterruptPriority
</UL>

<P><STRONG><a name="[342]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[338]"></a>_printf_core</STRONG> (Thumb, 1760 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[344]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[343]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[43]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
